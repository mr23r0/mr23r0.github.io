<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-03-03T01:37:02+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">[mr23r0]</title><subtitle>One place to share everything necessery</subtitle><author><name>Saransh Saraf</name></author><entry><title type="html">The Kind, the Ruthless, and the Ones Who Survive</title><link href="http://localhost:4000/creating-preception-of-good-and-bad" rel="alternate" type="text/html" title="The Kind, the Ruthless, and the Ones Who Survive" /><published>2025-03-03T00:00:00+05:30</published><updated>2025-03-03T00:00:00+05:30</updated><id>http://localhost:4000/creating-preception-of-good-and-bad</id><content type="html" xml:base="http://localhost:4000/creating-preception-of-good-and-bad">&lt;p&gt;Just by looking at the title, some of you might think I’ve finally lost it. &lt;strong&gt;You wouldn’t be wrong.&lt;/strong&gt; But if I said I haven’t, that &lt;strong&gt;wouldn’t be wrong&lt;/strong&gt; either. Strange, isn’t it? That’s exactly why you’re here.&lt;/p&gt;

&lt;p&gt;Right now, you might be asking, &lt;em&gt;What is this? Why?&lt;/em&gt; Soon, you’ll have your answers, or maybe just better questions.&lt;/p&gt;

&lt;p&gt;This category of posts are for those who, like me, wrestle with thoughts that refuse to rest, questions about life, the mind, and the strange truths hiding in the dark corners of our own existence.&lt;/p&gt;

&lt;h3 id=&quot;judgment-and-the-illusion-of-good-and-evil&quot;&gt;&lt;a href=&quot;#1&quot;&gt;Judgment and the Illusion of Good and Evil&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;How do I decide if someone is good or bad? Is it a single moment, a handful of actions, or just the way the story presents them to me?&lt;/p&gt;

&lt;p&gt;I’ve seen it happen before, watching a movie, reading a book, I accept the protagonist as the hero. But then, something doesn’t sit right. Their actions, their choices… they don’t feel good. And yet, I still root for them. Why?&lt;/p&gt;

&lt;p&gt;Take William Butcher from &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Boys_(TV_series)&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;The Boys&lt;/em&gt;&lt;/a&gt;. What do I think of him? A necessary evil? Maybe. A hero? Possibly. He stands against something greater than himself, against forces no one else dares to challenge. But is that enough?&lt;/p&gt;

&lt;p&gt;Do I see him this way because of his past? Because he cares for Hughie? Is that all it takes to justify everything else? Or is there something deeper, something I don’t even realize shaping my perception?&lt;/p&gt;

&lt;p&gt;I need to break this down further. I need to figure out why.&lt;/p&gt;

&lt;h3 id=&quot;the-justifications-we-cling-to&quot;&gt;&lt;a href=&quot;#2&quot;&gt;The Justifications We Cling To&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Maybe the only way to make sense of this is to go step by step.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Does he do the right thing? No. Killing, no matter the reason, is still killing.&lt;/li&gt;
  &lt;li&gt;Does he stop when he sees the consequences? No again. The satisfaction of getting things done, of winning, can push anyone to keep going, even when they shouldn’t.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And yet… I still see him as something more than just another violent man.&lt;/p&gt;

&lt;p&gt;Is it because of his past? The way he protects Hughie? Are these two things enough to excuse everything else?&lt;/p&gt;

&lt;p&gt;If I had to choose between Billy or Hughie to stand with me in a fight, I’d choose Billy. And I know most people would too. But why? Do I really know? Or is there something inside me, something I don’t fully understand, that makes the decision for me?&lt;/p&gt;

&lt;h3 id=&quot;reshaping-perception-one-truth-at-a-time&quot;&gt;&lt;a href=&quot;#3&quot;&gt;Reshaping Perception, One Truth at a Time&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Machiavelli said it best in &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Prince&quot; target=&quot;_blank&quot;&gt;The Prince&lt;/a&gt;&lt;/em&gt;, a ruler must be feared rather than loved, but never hated. Fear maintains control, prevents rebellion. To achieve this, a prince must act decisively: eliminate old rulers, live among his new people, uphold existing laws, crush opposition without hesitation, and, above all, avoid uncertainty.&lt;/p&gt;

&lt;p&gt;On the surface, these actions seem ruthless, perhaps even outright evil. But perception is not shaped in a single moment. It is molded over time, carefully crafted by how the story unfolds.&lt;/p&gt;

&lt;p&gt;Look at Billy Butcher. The first time I see him, his actions are simply bad, even cruel. No context, no justifications. Just a man doing terrible things. But then, piece by piece, the story fills in the gaps. The trauma. The past. The reasons.&lt;/p&gt;

&lt;p&gt;Suddenly, he isn’t just a violent man anymore. He is &lt;em&gt;necessary&lt;/em&gt;. The mind, ever so eager to make sense of things, adjusts. He was once the villain, but now… now he is something else.&lt;/p&gt;

&lt;p&gt;Perhaps Machiavelli was right. People don’t see actions for what they are; they see them through the lens of how the story is told.&lt;/p&gt;

&lt;h3 id=&quot;why-being-misunderstood-is-a-strength&quot;&gt;&lt;a href=&quot;#4&quot;&gt;Why Being Misunderstood is a Strength&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;If given a choice, most would rather be seen as good than bad. It seems like the obvious choice. After all, a good man is trusted, welcomed, embraced. But over time, experience teaches a different lesson, one that is not easy to accept.&lt;/p&gt;

&lt;p&gt;A man who is seen as good from the start is bound by expectation. His kindness becomes his cage, his virtue a leash held by those who would use it against him. The world does not reward goodness, it exploits it. And when the good man finally refuses to kneel, he is not seen as strong. He is seen as treacherous.&lt;/p&gt;

&lt;p&gt;But those who are first seen as bad, harsh, indifferent, ruthless, they are free. Free to act, to decide, to shape their own path without bending to the will of others. And when they choose to show kindness? It is not expected. It is &lt;em&gt;remembered&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;History favors those who command fear before love. The feared man may become loved, but the loved man, if he stumbles, will be hated. That is the way of things. That is why it is often wiser to let others misunderstand at first. Not because one must be cruel, not because fear is the goal, but because control is lost the moment one becomes a servant to perception.&lt;/p&gt;

&lt;p&gt;Let them believe what they will. In time, the truth reveals itself. And if it doesn’t? Then perhaps the illusion was necessary all along.&lt;/p&gt;</content><author><name>Saransh Saraf</name></author><category term="life and philosophy" /><category term="perception" /><category term="of" /><category term="good" /><category term="and" /><category term="evil," /><category term="morality" /><category term="and" /><category term="power," /><category term="heroes" /><category term="vs" /><category term="villains," /><category term="necessary" /><category term="evil," /><category term="psychology" /><category term="of" /><category term="perception," /><category term="fear" /><category term="vs" /><category term="respect," /><category term="misunderstood" /><category term="genius," /><category term="the" /><category term="cost" /><category term="of" /><category term="kindness," /><category term="shaping" /><category term="reputation," /><category term="illusion" /><category term="of" /><category term="virtue," /><category term="power" /><category term="dynamics," /><category term="psychological" /><category term="storytelling," /><category term="morality" /><category term="in" /><category term="fiction," /><category term="ethical" /><category term="dilemmas," /><category term="redefining" /><category term="good" /><category term="and" /><category term="bad" /><summary type="html">Just by looking at the title, some of you might think I’ve finally lost it. You wouldn’t be wrong. But if I said I haven’t, that wouldn’t be wrong either. Strange, isn’t it? That’s exactly why you’re here.</summary></entry><entry><title type="html">Conducting A Successful Pentest by Ayman Elsawah</title><link href="http://localhost:4000/successful-pentest" rel="alternate" type="text/html" title="Conducting A Successful Pentest by Ayman Elsawah" /><published>2025-02-24T00:00:00+05:30</published><updated>2025-02-24T00:00:00+05:30</updated><id>http://localhost:4000/successful-pentest</id><content type="html" xml:base="http://localhost:4000/successful-pentest">&lt;h3 id=&quot;index&quot;&gt;Index&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-a-pood-pentest&quot;&gt;What Is A Good Pentest?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#before-the-pentest&quot;&gt;Before The Pentest&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#selecting-a-provider&quot;&gt;Selecting A Provider&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#a-note-about-cost&quot;&gt;A Note About Cost&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#project-coordination&quot;&gt;Project Coordination&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#environment&quot;&gt;Environment&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#credentials&quot;&gt;Credentials&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#fix-your-low-hanging-fruit&quot;&gt;Fix Your Low Hanging Fruit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#during-the-pentest&quot;&gt;During The Pentest&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#watching-the-logs&quot;&gt;Watching the logs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Check-Ins-and-communication&quot;&gt;Check-Ins and Communication&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#sample-schedule&quot;&gt;Sample Schedule&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#why-so-many-check-ins?&quot;&gt;Why so many check-ins?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#after-the-pentest&quot;&gt;After The Pentest&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Wrap-Up&quot;&gt;Wrap Up&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#reporting-&amp;amp;-read-out&quot;&gt;Reporting &amp;amp; Read Out&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#fixes-before-final-report&quot;&gt;Fixes Before Final Report&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Retesting&quot;&gt;Retesting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Sharing-your-reports&quot;&gt;Sharing Your Reports&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;introduction&quot;&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As pentest season descends upon us, I’d like to share tips and tricks to get the best value out of your pentest and ensure a successful engagement. I’ve been on both sides of the fence, so I think I have a unique perspective to share on this often nebulous endeavor.&lt;/p&gt;

&lt;p&gt;This guide will help you:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Distinguish a good pentest provider&lt;/li&gt;
  &lt;li&gt;Ensure you have the best talent on your project&lt;/li&gt;
  &lt;li&gt;Scope your project to have the most effective pentest&lt;/li&gt;
  &lt;li&gt;Setup your pentest for success&lt;/li&gt;
  &lt;li&gt;Understand what to expect from a good pentest company&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this guide you should be well equipped to have a successful pentest.&lt;/p&gt;

&lt;p&gt;Let’s get into it!&lt;/p&gt;

&lt;h3 id=&quot;what-is-a-good-pentest&quot;&gt;&lt;a href=&quot;#what-is-a-pood-pentest&quot;&gt;What Is A Good Pentest?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Selecting a pentest provider can be a daunting process, especially if it’s your first time. How can you tell which company will do the best job?&lt;/p&gt;

&lt;p&gt;Well, let’s start there.&lt;/p&gt;

&lt;p&gt;What is a good job? What is a successful pentest?&lt;/p&gt;

&lt;p&gt;A good pentest does not necessarily mean that a lot of bugs were found, although if it’s your first pentest I would be surprised no vulnerabilities were found.&lt;/p&gt;

&lt;p&gt;A successful pentest means you had the right people on the job, they had adequate time to find the issues, and were provided with the proper resources.&lt;/p&gt;

&lt;p&gt;That’s basically it in a nutshell.&lt;/p&gt;

&lt;h2 id=&quot;before-the-pentest&quot;&gt;&lt;a href=&quot;#before-the-pentest&quot;&gt;Before The Pentest&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;selecting-a-provider&quot;&gt;&lt;a href=&quot;#selecting-a-provider&quot;&gt;Selecting A Provider&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now that we’ve established success criteria, let’s go into vendor selection. These are the people to do the job.&lt;/p&gt;

&lt;p&gt;One distinguishing factor in a provider is having a good research arm.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Do they publish a lot of research? How often?&lt;/li&gt;
  &lt;li&gt;Do their pentesters have any published CVE’s?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the end of the day, selecting a vendor is basically on whether they have the right people to do the job. They can have all the logos in the world, great sales people, and even an interesting app along with it… but can they do the job?&lt;/p&gt;

&lt;p&gt;Next you will want to match the people with your stack.&lt;/p&gt;

&lt;p&gt;Is there anything nuanced about your stack? Do you have mobile or desktop apps as well?&lt;/p&gt;

&lt;p&gt;In the proposal, a good pentest vendor will provide you with bios of the people assigned to your project. That will allow you to look up their experience, their blog posts, GitHub profile, and etc and see if they are a fit for you.&lt;/p&gt;

&lt;p&gt;Next is ascertaining how long the engagement will be. There are several ways they are configured, but there are only two main factors:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How many people are assigned to the pentest?&lt;/li&gt;
  &lt;li&gt;How long the actual pentest will be?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Typical engagements are 2 x 2, meaning two people for two weeks.&lt;/p&gt;

&lt;p&gt;This can vary from provider to provider, with scope being a factor in consideration as well.&lt;/p&gt;

&lt;p&gt;So if you have a tiny application, they may decide to make it a 2 x 1.&lt;/p&gt;

&lt;p&gt;If they’re throwing a superstar on the application, it can be a 3 x 1.&lt;/p&gt;

&lt;p&gt;YMMV here.&lt;/p&gt;

&lt;p&gt;One other important consideration is whether the people assigned to your project are ever double booked. It’s important to ask your vendor whether they are ever double booked.&lt;/p&gt;

&lt;p&gt;While they may not be double booked during the engagement, sometimes what happens is they are still writing the report the following weeks, while on another engagement.&lt;/p&gt;

&lt;p&gt;Depending on the size of the firm, they may have a QA process where reports must go through a peer review or QA process. This is a good thing, and we should allow this process to work.&lt;/p&gt;

&lt;p&gt;In some companies, the people that do the pentest are not the ones that write the report. Any findings found will be sent to a reporting team where they will verify findings and writeup the report and remediation. This is an interesting model.&lt;/p&gt;

&lt;h3 id=&quot;a-note-about-cost&quot;&gt;&lt;a href=&quot;#a-note-about-cost&quot;&gt;A Note About Cost&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Keep in mind, the most expensive provider does not always mean the best. Conversely, the cheapest isn’t always the worst.&lt;/p&gt;

&lt;p&gt;Labor cost is just part of the equation, most of which can be attributed to locale. Other parts that play a factor is the amount of overhead internally (project management, account executives, etc.). So a lean shop of 10-20 super senior experts could be cheaper than the 80-100 person shop. So YMMV.&lt;/p&gt;

&lt;h3 id=&quot;project-coordination&quot;&gt;&lt;a href=&quot;#project-coordination&quot;&gt;Project Coordination&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A pentest is a significant project on its own. So many different components are involved and since it’s a time boxed engagement, any delays could be very costly. Momentum stops and having to restart again is a waste of time.&lt;/p&gt;

&lt;p&gt;Some pentest firms will assign a project coordinator to help facilitate the process. They will take care of scheduling kick off calls, getting credentials, and communicating with you throughout the engagement.&lt;/p&gt;

&lt;p&gt;Regardless of whether they provide someone or not, you must have a point person internally on your side that is coordinating the engagement and keeping them accountable. Having this will increase the likelihood of a successful pentest.&lt;/p&gt;

&lt;p&gt;This can be the CISO/Head of Security, Deputy CISO, or security engineer.&lt;/p&gt;

&lt;p&gt;This person will be the glue on your side that is working to get the environment up and running, getting credentials, checking calendars for calls, and coordinating communication between the internal team and the pentest team.&lt;/p&gt;

&lt;p&gt;You thought you could just get a pentest and forget it huh? 😅&lt;/p&gt;

&lt;h3 id=&quot;environment&quot;&gt;&lt;a href=&quot;#environment&quot;&gt;Environment&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An important factor for any successful pentest is having the right environment for a pentest. You will want a like for like environment with the same code and logic running in production. This may be an existing staging/dev environment or a brand new environment.&lt;/p&gt;

&lt;p&gt;Where possible you will want a dedicated environment, especially if your risk tolerance for availability is low, but it is totally understandable that resource constraints, especially if you’re a startup, may not warrant such a luxury.&lt;/p&gt;

&lt;p&gt;Allowing a pentest on your production environment, while not unheard of, is not recommended. Pentesters will use a combination of automated and manual tools where they are trying to actively exploit your application. This means they are trying to get the application to do things it was NOT intended to do.&lt;/p&gt;

&lt;p&gt;They cause the application to freeze.&lt;/p&gt;

&lt;p&gt;They may access data they were not allowed to.&lt;/p&gt;

&lt;p&gt;They may get RCE (Remote Code Execution) on your container or EC2, and try to elevate from there. (I assume you’re not running your containers as root, please tell me that’s the case!).&lt;/p&gt;

&lt;p&gt;They should have liberty to do as they wish.&lt;/p&gt;

&lt;p&gt;You are paying expensive dollars for this, make it worth it.&lt;/p&gt;

&lt;p&gt;So yeah, don’t run a pentest in production or with production data.&lt;/p&gt;

&lt;h3 id=&quot;credentials&quot;&gt;&lt;a href=&quot;#credentials&quot;&gt;Credentials&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Another part of a good pentest is simulating authenticated users.&lt;/p&gt;

&lt;p&gt;While pentesters will conduct unauthenticated attacks on your website, they will also need to run authenticated attacks.&lt;/p&gt;

&lt;p&gt;The goal here is to have them try to access data  they are not otherwise supposed to access (cross tenant attacks).&lt;/p&gt;

&lt;p&gt;So to succeed, each pentester will require at least one credential for every role available on your application, including admin.&lt;/p&gt;

&lt;p&gt;So if you have 2 pentesters, and 3 roles (user, power user, admin), you will need 2 sets of credentials created, one for each role, 6 in total.&lt;/p&gt;

&lt;p&gt;Some companies may ask for more, but this is the minimum any good pentest firm should request from you.&lt;/p&gt;

&lt;p&gt;If they don’t ask until the pentest has already started, then they are not organized and professional imho.&lt;/p&gt;

&lt;p&gt;Please also make sure the testing environment is stable.&lt;/p&gt;

&lt;p&gt;Nothing like an unstable environment to ruin a pentesters day.&lt;/p&gt;

&lt;p&gt;Not to mention an utter waste of time and money.&lt;/p&gt;

&lt;h3 id=&quot;fix-your-low-hanging-fruit&quot;&gt;&lt;a href=&quot;#fix-your-low-hanging-fruit&quot;&gt;Fix Your Low Hanging Fruit&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Before doing a pentest, make sure you fix all your low hanging fruit.&lt;/p&gt;

&lt;p&gt;You’re bringing in professionals to try to break your app and make it do nasty things.&lt;/p&gt;

&lt;p&gt;You wouldn’t want to waste their valuable time with weak passwords and not secure cookies.&lt;/p&gt;

&lt;p&gt;Not only that, but you don’t want these basic items on your report in the event you need to share it externally (see below).&lt;/p&gt;

&lt;p&gt;Believe it or not, many companies know about these vulnerabilities already, but just haven’t fixed them for whatever reason.&lt;/p&gt;

&lt;p&gt;Fix them.&lt;/p&gt;

&lt;p&gt;Of course, don’t let this be a blocker for a pentest. Maybe you (the security person) are looking for a 3rd party to validate what you already know.&lt;/p&gt;

&lt;p&gt;Happens all the time.&lt;/p&gt;

&lt;h2 id=&quot;during-the-pentest&quot;&gt;&lt;a href=&quot;#during-the-pentest&quot;&gt;During The Pentest&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So your pentest is scheduled to start on a Monday.&lt;/p&gt;

&lt;p&gt;On the Friday prior, you should have had the kickoff call, credentials exchanged, slack channel setup, and environment ready to go.&lt;/p&gt;

&lt;p&gt;That is the best early indicator of a successful pentest.&lt;/p&gt;

&lt;p&gt;You have the pentesters ready to hit the ground running on Monday.&lt;/p&gt;

&lt;p&gt;Nice work.&lt;/p&gt;

&lt;h3 id=&quot;watching-the-logs&quot;&gt;&lt;a href=&quot;#watching-the-logs&quot;&gt;Watching the logs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now you as coordinator on the client side sit and wait.&lt;/p&gt;

&lt;p&gt;You can watch the web traffic and requests as they hit the application.&lt;/p&gt;

&lt;p&gt;This will give you an idea of how they work.&lt;/p&gt;

&lt;p&gt;They may first start with the standard automated or semi-automated tools.&lt;/p&gt;

&lt;p&gt;Or maybe they are using custom scripts they’ve developed.&lt;/p&gt;

&lt;p&gt;It should be pretty intense the first couple days.&lt;/p&gt;

&lt;p&gt;You can see if your WAF has caught any of their traffic as well.&lt;/p&gt;

&lt;h3 id=&quot;check-ins-and-communication&quot;&gt;&lt;a href=&quot;#Check-Ins-and-communication&quot;&gt;Check-Ins and Communication&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As with any relationship, no news is not great news.&lt;/p&gt;

&lt;p&gt;The more communication the better.&lt;/p&gt;

&lt;p&gt;Did they find any bugs?&lt;/p&gt;

&lt;p&gt;Did they run into any issues?&lt;/p&gt;

&lt;p&gt;Is everything ok?&lt;/p&gt;

&lt;p&gt;Keep in mind, if a pentester finds something they have to spend some time validating the finding.&lt;/p&gt;

&lt;p&gt;They wouldn’t want to startle you with a finding, only to find out it was a false alarm.&lt;/p&gt;

&lt;p&gt;Regardless, having a quick check-in more frequently than not can be very helpful, especially in the beginning, however the reality is that pentesting is a demanding business. A daily check-in for example is too much, and many shops will push back.&lt;/p&gt;

&lt;p&gt;To find a balance, I would get a quick check-in at the end of the first day or first thing the next and then another a couple days later. You would be surprised, some pentesters may have something on their mind, but don’t speak up.&lt;/p&gt;

&lt;h3 id=&quot;sample-schedule&quot;&gt;&lt;a href=&quot;#sample-schedule&quot;&gt;Sample Schedule&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So if the project starts on a Monday, here what it could look like:&lt;/p&gt;

&lt;p&gt;Week 1&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Friday - Kick Off Call and creds exchange&lt;/li&gt;
  &lt;li&gt;Monday EOD - Quick Sync w/PM&lt;/li&gt;
  &lt;li&gt;Thursday AM - Quick Sync w/PM&lt;/li&gt;
  &lt;li&gt;Friday AM - Brief Check-in with Pentesters, findings update&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hopefully this doesn’t annoy them too much!&lt;/p&gt;

&lt;p&gt;Week 2&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Either Tues or Wed  - Check-In w/pentesters&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;why-so-many-check-ins&quot;&gt;&lt;a href=&quot;#why-so-many-check-ins?&quot;&gt;Why so many check-ins?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Sure this may sound like micro-managing a bit, but keep in mind this is a time boxed engagement. So if the pentesters bring something up that you think they should explore a little more or conversely don’t want them to go down a rabbit hole because you know about a bug already (which you should have mentioned), then this will save you time. This also assumes your application has a large footprint and may be a bit complex.&lt;/p&gt;

&lt;p&gt;Hopefully this context will help you have a better understanding of a pentest flow.&lt;/p&gt;

&lt;p&gt;Another helpful reason for the check-ins is to learn of any findings and try to fix them before the pentest is over. See below.&lt;/p&gt;

&lt;h2 id=&quot;after-the-pentest&quot;&gt;&lt;a href=&quot;#after-the-pentest&quot;&gt;After The Pentest&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;wrap-up&quot;&gt;&lt;a href=&quot;#Wrap-Up&quot;&gt;Wrap Up&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After the pentest period is over, now the fun part (no, I’m being sarcastic) comes. The pentesters now need to write up a formal report to be presented.&lt;/p&gt;

&lt;p&gt;Keep in mind, they need to not only verify all the findings, but need to make suggestions regarding a fix.&lt;/p&gt;

&lt;p&gt;More often than not the fixes will be generic, as many shops don’t have the time to write a custom recommendation.&lt;/p&gt;

&lt;p&gt;However, sometimes you will see custom written recommendations, where they give specific instructions on how to fix a vulnerability. That is sweet.&lt;/p&gt;

&lt;p&gt;Of course, we have AI now to help us with this task, so maybe it’s not so meaningful, but I can still reminisce right?&lt;/p&gt;

&lt;p&gt;Once the report is done, they should reach out and schedule a read-out.&lt;/p&gt;

&lt;h3 id=&quot;reporting--read-out&quot;&gt;&lt;a href=&quot;#reporting-&amp;amp;-read-out&quot;&gt;Reporting &amp;amp; Read Out&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Probably the most important part of the penetration test is the read out.&lt;/p&gt;

&lt;p&gt;This is an opportunity to hear it straight from the technical people who were hammering away on your app for a couple weeks.&lt;/p&gt;

&lt;p&gt;You will want the right people in the room, and they need to hear it live.&lt;/p&gt;

&lt;p&gt;Both Engineering leaders and engineers should attend.&lt;/p&gt;

&lt;p&gt;The various viewpoints are important.&lt;/p&gt;

&lt;p&gt;Especially if something is going to be prioritized, engineering leaders should have the context why.&lt;/p&gt;

&lt;p&gt;Btw, If your pentest firm just hands you a report, then they may not be super professional imho!&lt;/p&gt;

&lt;p&gt;Insist on a readout.&lt;/p&gt;

&lt;h3 id=&quot;fixes-before-final-report&quot;&gt;&lt;a href=&quot;#fixes-before-final-report&quot;&gt;Fixes Before Final Report&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You have a few opportunities to fix any vulnerabilities found which would be beneficial to you in the long run.&lt;/p&gt;

&lt;p&gt;During the readout or prior, the firm may be presenting a draft report.&lt;/p&gt;

&lt;p&gt;If there is a finding found and you are able to fix it before the report is finalized and during the pentest, then the finding will be labeled as fixed in the final report.&lt;/p&gt;

&lt;p&gt;A finding will never be not disclosed once found. You wouldn’t want that and it’s not ethical.&lt;/p&gt;

&lt;h3 id=&quot;retesting&quot;&gt;&lt;a href=&quot;#Retesting&quot;&gt;Retesting&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Some firms will also include a free retest within 60 or 90 days for example.&lt;/p&gt;

&lt;p&gt;This is helpful in the event you were able to fix the issues, they can retest and make sure your fixes solved the findings.&lt;/p&gt;

&lt;p&gt;They may be able to issue an updated report as well, or at least a one pager mentioning the retest and results.&lt;/p&gt;

&lt;h3 id=&quot;sharing-your-reports&quot;&gt;&lt;a href=&quot;#Sharing-your-reports&quot;&gt;Sharing Your Reports&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You have this shiny new report that has a lot of ugly things about your environment.&lt;/p&gt;

&lt;p&gt;What if customers ask you for a copy, what should you do?&lt;/p&gt;

&lt;p&gt;The standard playbook for most security situations is to share as little as possible.&lt;/p&gt;

&lt;p&gt;This is not legal advice, consult with a lawyer.&lt;/p&gt;

&lt;p&gt;Your pentest firm should give you a Letter of Attestation along with the report.&lt;/p&gt;

&lt;p&gt;This is a high level document that says they came in, they saw, and they finished.&lt;/p&gt;

&lt;p&gt;Usually it will just have a count of the severity of vulnerabilities found.&lt;/p&gt;

&lt;p&gt;Names of vulnerabilities are not usually listed here.&lt;/p&gt;

&lt;p&gt;This will take care of many customer’s needs.&lt;/p&gt;

&lt;p&gt;Keep in mind they will ask you if you’ve fixed them or not.&lt;/p&gt;

&lt;p&gt;The next step of sharing, would be a table of contents for the report.&lt;/p&gt;

&lt;p&gt;This would typically list the names of the vulnerabilities and severity.&lt;/p&gt;

&lt;p&gt;Lastly, would be sharing the entire report.&lt;/p&gt;

&lt;p&gt;Some things to consider when sharing your report:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Always have an NDA&lt;/li&gt;
  &lt;li&gt;Do not distribute this report freely, especially to non-customers&lt;/li&gt;
  &lt;li&gt;You are expected to fix the vulnerabilities in a reasonable amount of time. If you haven’t fixed them, it’s not the end of the world, as long as you are to explain why and it’s an egregious issue.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ok, so that’s everything I know about running a pentest.&lt;/p&gt;

&lt;p&gt;For pentesters, it’s an intense period. Having a short amount of time to find vulnerabilities can be daunting but also a fun challenge.&lt;/p&gt;

&lt;p&gt;A successful pentest requires investment in time and resources ahead of time.&lt;/p&gt;

&lt;p&gt;It’s well worth it though.&lt;/p&gt;

&lt;p&gt;With this guide you should be well equipped to have a successful pentest.&lt;/p&gt;</content><author><name>Saransh Saraf</name></author><category term="resources" /><category term="penetration" /><category term="testing," /><category term="pentest" /><category term="guide," /><category term="cybersecurity," /><category term="ethical" /><category term="hacking," /><category term="security" /><category term="testing," /><category term="Ayman" /><category term="Elsawah," /><category term="vulnerability" /><category term="assessment," /><category term="network" /><category term="security," /><category term="security" /><category term="audit," /><category term="ethical" /><category term="hacking" /><category term="techniques," /><category term="successful" /><category term="pentest," /><category term="cybersecurity" /><category term="best" /><category term="practices," /><category term="penetration" /><category term="test" /><category term="steps," /><category term="security" /><category term="assessment" /><summary type="html">Index Introduction What Is A Good Pentest? Before The Pentest Selecting A Provider A Note About Cost Project Coordination Environment Credentials Fix Your Low Hanging Fruit During The Pentest Watching the logs Check-Ins and Communication Sample Schedule Why so many check-ins? After The Pentest Wrap Up Reporting &amp;amp; Read Out Fixes Before Final Report Retesting Sharing Your Reports Conclusion</summary></entry><entry><title type="html">Getting Started with Cloud Security</title><link href="http://localhost:4000/cloud-security-starter" rel="alternate" type="text/html" title="Getting Started with Cloud Security" /><published>2025-02-21T00:00:00+05:30</published><updated>2025-02-21T00:00:00+05:30</updated><id>http://localhost:4000/cloud-security-starter</id><content type="html" xml:base="http://localhost:4000/cloud-security-starter">&lt;h3 id=&quot;index&quot;&gt;Index&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#fundamentals&quot;&gt;Fundamentals&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#security-basics&quot;&gt;Security Basics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#compliance&quot;&gt;Compliance&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction&quot;&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Cloud security isn’t something you can just point to and say, “I know this and that, so I know cloud security.” Like the entire security domain, it consists of multiple components that form its foundation. In this post, I’ll do my best to provide a starting point to help you navigate this vast field.&lt;/p&gt;

&lt;h3 id=&quot;fundamentals&quot;&gt;&lt;a href=&quot;#fundamentals&quot;&gt;Fundamentals&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Before diving into cloud security, as the name suggests, you first need a solid understanding of the cloud itself. But even before that, I believe you should be familiar with these key concepts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.ibm.com/think/topics/iaas&quot; target=&quot;_blank&quot;&gt;IaaS&lt;/a&gt;, or infrastructure as a service, is on-demand access to cloud-hosted physical and virtual servers, storage and networking—the backend IT infrastructure for running applications and workloads in the cloud.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.ibm.com/think/topics/paas&quot; target=&quot;_blank&quot;&gt;PaaS&lt;/a&gt;, or platform as a service, is on-demand access to a complete, ready-to-use, cloud-hosted platform for developing, running, maintaining and managing applications.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.ibm.com/think/topics/saas&quot; target=&quot;_blank&quot;&gt;SaaS&lt;/a&gt;, or software as a service, is on-demand access to ready-to-use, cloud-hosted application software.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use the embedded links to explore these topics further, IBM provides some of the best videos and articles on the subject. Once you’re comfortable with these concepts, we can move on to understanding the cloud itself.
There are multiple cloud platforms in the market but based on the market share they have, we’ll priortize the learning&lt;/p&gt;
&lt;canvas id=&quot;marketShareChart&quot; width=&quot;600&quot; height=&quot;400&quot;&gt;&lt;/canvas&gt;
&lt;script&gt;
        const ctx = document.getElementById(&apos;marketShareChart&apos;).getContext(&apos;2d&apos;);
        const marketShareChart = new Chart(ctx, {
            type: &apos;line&apos;,
            data: {
                labels: [&apos;AWS&apos;, &apos;Microsoft Azure&apos;, &apos;Google Cloud&apos;, &apos;Alibaba Cloud&apos;, &apos;Oracle&apos;, &apos;Others&apos;],
                datasets: [{
                    label: &apos;Market Share (%)&apos;,
                    data: [30, 21, 12, 4, 3, 30],
                    borderColor: &apos;rgba(75, 192, 192, 1)&apos;,
                    backgroundColor: &apos;rgba(75, 192, 192, 0.2)&apos;,
                    fill: true,
                    tension: 0.1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                        max: 40,
                        title: {
                            display: true,
                            text: &apos;Market Share (%)&apos;
                        }
                    }
                },
                plugins: {
                    title: {
                        display: true,
                        text: &apos;Cloud Providers Market Share in Q4 2024&apos;
                    }
                }
            }
        });
    &lt;/script&gt;

&lt;p&gt;Looking at market share, it’s smart to focus on AWS, Azure, and Google Cloud (GCP). Some might say that’s too much for beginners, but who gives a shit? You’re not going to stay a beginner forever. Better to start now and not get overwhelmed. 😉&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/bgPuPSPZe2U?si=pzvz4ky2U6MvOISr&quot; target=&quot;_blank&quot;&gt;AWS&lt;/a&gt; : &lt;a href=&quot;https://www.youtube.com/watch?v=QbipcgIdSJc&quot; target=&quot;_blank&quot;&gt;Architecture&lt;/a&gt; : &lt;a href=&quot;https://www.youtube.com/watch?v=c3Cn4xYfxJY&quot; target=&quot;_blank&quot;&gt;Deep-Dive&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=3Arj5zlUPG4&quot; target=&quot;_blank&quot;&gt;Azure&lt;/a&gt; : &lt;a href=&quot;https://www.youtube.com/watch?v=i6NzKvGUsBs&quot; target=&quot;_blank&quot;&gt;Deep-Dive&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Google Cloud, or GCP : &lt;a href=&quot;https://www.youtube.com/watch?v=uuotOQjOeb0&amp;amp;list=PLwi6PfxEP7zYLVCK_ywVD-RJNDu6mYXbi&quot; target=&quot;_blank&quot;&gt;Architecture&lt;/a&gt; : &lt;a href=&quot;https://www.youtube.com/watch?v=jpno8FSqpc8&quot; target=&quot;_blank&quot;&gt;Deep-Dive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, you’ll need to understand how Identity and Access Management (IAM) works. Within IAM, you’ll come across Role-Based Access Control (RBAC) and &lt;a href=&quot;https://learn.microsoft.com/en-us/security/zero-trust/zero-trust-overview&quot; target=&quot;_blank&quot;&gt;Zero Trust&lt;/a&gt; both essential concepts in cloud security. These topics are covered in the deep-dive of each cloud platform, but if you skipped those, here are some great resources to catch up, &lt;a href=&quot;https://www.anyshift.io/blog/a-deep-dive-in-aws-resources-best-practices-to-adopt-identity-and-access-management-(iam)&quot; target=&quot;_blank&quot;&gt;here is a one you can try&lt;/a&gt; or &lt;a href=&quot;https://www.techtarget.com/searchsecurity/definition/identity-access-management-IAM-system&quot; target=&quot;_blank&quot;&gt;try this&lt;/a&gt;, IAM principles remain fairly similar across all cloud platforms, so once you get the hang of it, transitioning between providers becomes easier.&lt;/p&gt;

&lt;p&gt;To wrap up this section, the last key concept is Deployment Models, which you can explore &lt;a href=&quot;https://spacelift.io/blog/cloud-deployment-models&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;security-basics&quot;&gt;&lt;a href=&quot;#security-basics&quot;&gt;Security Basics&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;In the cloud, there are principles and models, a lot of them. But to get started, you only need to focus on a couple of key ones:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.wiz.io/academy/shared-responsibility-model&quot; target=&quot;_blank&quot;&gt;Shared Responsibility Model&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cyera.io/blog/the-fundamentals-of-data-security-in-cloud-computing&quot; target=&quot;_blank&quot;&gt;CIA Triad : Confidentiality, Integrity and Availability&lt;/a&gt; (this includes more interesting stuff as well, just a little format stuff)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Data security in the cloud ensures that your data is protected from unauthorized access, breaches, and leaks. Two major concepts in data security are encryption and key management. However, when it comes to the cloud, things get more granular.&lt;/p&gt;

&lt;p&gt;Each cloud platform provides its own key management service to handle encryption keys securely, such as &lt;a href=&quot;https://www.youtube.com/watch?v=f3APF1dP8w0&quot;&gt;AWS KMS&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=0cwcT06YwPE&quot; target=&quot;_blank&quot;&gt;Azure Key Vault&lt;/a&gt; and &lt;a href=&quot;https://www.youtube.com/playlist?list=PLi133fNSP6SiMDGwngZGaxFQYfWHMDAOW&quot; target=&quot;_blank&quot;&gt;Google Cloud KMS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These services ensure that encryption keys are managed securely and efficiently, reducing the risk of unauthorized access to sensitive data.&lt;/p&gt;

&lt;p&gt;Like any other aspect of security, nothing is complete without logs, monitoring, and security systems, and the cloud is no exception. Each cloud platform has its own logging and monitoring services. Some key examples include :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html&quot; target=&quot;_blank&quot;&gt;CloudTrail&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/securityhub/latest/userguide/what-is-securityhub.html&quot; target=&quot;_blank&quot;&gt;Security Hub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/guard-duty-rds-protection.html&quot; target=&quot;_blank&quot;&gt;GuardDuty&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ibm.com/think/topics/siem&quot; target=&quot;_blank&quot;&gt;SIEM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/security/products/security-command-center&quot; target=&quot;_blank&quot;&gt;SCC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://azure.microsoft.com/en-us/products/defender-for-cloud&quot; target=&quot;_blank&quot;&gt;Defender for Cloud&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.wiz.io/academy/what-is-cloud-security-posture-management-cspm&quot; target=&quot;_blank&quot;&gt;CSPM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cyberark.com/what-is/secrets-management/&quot; target=&quot;_blank&quot;&gt;Secrets Management&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.encryptionconsulting.com/education-center/what-is-code-signing/&quot; target=&quot;_blank&quot;&gt;Code Signing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://circleci.com/blog/sast-vs-dast-when-to-use-them/&quot; target=&quot;_blank&quot;&gt;SAST/DAST&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;compliance&quot;&gt;&lt;a href=&quot;#compliance&quot;&gt;Compliance&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Compliance plays a major role in any infrastructure. It helps build customer trust by ensuring that the vendor follows a predefined set of security guidelines to protect data. These standards are updated periodically, so it’s always a good idea to do a quick Google search to find the latest official and free documentation for learning.&lt;/p&gt;

&lt;p&gt;Some key compliance frameworks include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SOC 2&lt;/li&gt;
  &lt;li&gt;HIPAA&lt;/li&gt;
  &lt;li&gt;ISO 27001&lt;/li&gt;
  &lt;li&gt;NIST&lt;/li&gt;
  &lt;li&gt;CIS Benchmarks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Organizations use Cloud Security Posture Management (CSPM) tools to maintain compliance and ensure configurations align with security best practices. However, compliance alone isn’t enough, concepts like Zero Trust, Least Privilege, and other security best practices also play a crucial role in keeping cloud environments secure.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As you’ve seen, many sub-services are involved in keeping infrastructure and applications running in the cloud. The only way to identify vulnerabilities is by following best practices, particularly in areas like misconfigurations and exposed data.&lt;/p&gt;

&lt;p&gt;Like everything else in security, cloud security is an ever-evolving field. Every month, new services emerge, along with new ways to misconfigure them, making entire systems vulnerable. This means continuous learning is essential.&lt;/p&gt;

&lt;p&gt;To stay ahead, it’s highly recommended to deep dive into specific cloud platforms, ensuring a strong understanding of security configurations and their behaviors within each platform.&lt;/p&gt;</content><author><name>Saransh Saraf</name></author><category term="resources" /><category term="cloud" /><category term="security" /><category term="basics," /><category term="getting" /><category term="started" /><category term="with" /><category term="cloud" /><category term="security," /><category term="cloud" /><category term="security" /><category term="for" /><category term="beginners," /><category term="cloud" /><category term="security" /><category term="best" /><category term="practices," /><category term="IAM" /><category term="in" /><category term="cloud" /><category term="security," /><category term="cloud" /><category term="encryption" /><category term="and" /><category term="key" /><category term="management," /><category term="compliance" /><category term="in" /><category term="cloud" /><category term="security," /><category term="SOC" /><category term="2," /><category term="HIPAA," /><category term="ISO" /><category term="27001," /><category term="cloud" /><category term="logging" /><category term="and" /><category term="monitoring," /><category term="AWS" /><category term="security," /><category term="Azure" /><category term="security," /><category term="GCP" /><category term="security," /><category term="CSPM," /><category term="cloud" /><category term="misconfigurations," /><category term="cloud" /><category term="computing" /><category term="security," /><category term="cybersecurity," /><category term="cloud" /><category term="security" /><category term="fundamentals," /><category term="information" /><category term="security," /><category term="securing" /><category term="cloud" /><category term="infrastructure" /><summary type="html">Index Introduction Fundamentals Security Basics Compliance Conclusion</summary></entry><entry><title type="html">Adaptive Web Design ED1 - Some fundamental good reads</title><link href="http://localhost:4000/adaptive-web-design-v1" rel="alternate" type="text/html" title="Adaptive Web Design ED1 - Some fundamental good reads" /><published>2025-02-09T00:00:00+05:30</published><updated>2025-02-09T00:00:00+05:30</updated><id>http://localhost:4000/adaptive-web-design-v1</id><content type="html" xml:base="http://localhost:4000/adaptive-web-design-v1">&lt;p&gt;“Adaptive Web Design” by &lt;a href=&quot;https://www.linkedin.com/in/aarongustafson&quot; target=&quot;_blank&quot;&gt;Aaron Gustafson&lt;/a&gt; explains how to build websites that work well on all devices by focusing on accessibility, usability, and flexibility. For security researchers, it shows how designing with these principles can help reduce security risks, make websites more reliable, and improve user safety. A great read for anyone interested in the connection between web design and security. (something that I found very interesting and useful, your opinion may vary)&lt;/p&gt;

&lt;div class=&quot;iframe-wrapper&quot; style=&quot;width: 100%; max-width: 100%; margin: 0 auto; padding: 0;&quot;&gt;
    &lt;div class=&quot;iframe-container&quot; style=&quot;position: relative; width: 100%; height: 600px; background-color: white; overflow: hidden;&quot;&gt;
        &lt;iframe src=&quot;https://adaptivewebdesign.info/1st-edition/read/&quot; style=&quot;position: absolute; 
                   top: 0; 
                   left: 0; 
                   width: 100%; 
                   height: 100%; 
                   border: 1px solid #ccc; 
                   color-scheme: light; 
                   background-color: white; 
                   overflow: hidden; 
                   -webkit-overflow-scrolling: touch; 
                   transform: translateZ(0);
                   -webkit-transform: translateZ(0);
                   -webkit-backface-visibility: hidden;
                   backface-visibility: hidden;&quot; scrolling=&quot;yes&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;You can also read it directly at &lt;a href=&quot;https://adaptivewebdesign.info/1st-edition/read/&quot; target=&quot;_blank&quot;&gt;adaptivewebdesign.info ↗&lt;/a&gt;&lt;/p&gt;</content><author><name>Saransh Saraf</name></author><category term="books" /><summary type="html">“Adaptive Web Design” by Aaron Gustafson explains how to build websites that work well on all devices by focusing on accessibility, usability, and flexibility. For security researchers, it shows how designing with these principles can help reduce security risks, make websites more reliable, and improve user safety. A great read for anyone interested in the connection between web design and security. (something that I found very interesting and useful, your opinion may vary)</summary></entry><entry><title type="html">The Curious Case of Unlimited AI Calls</title><link href="http://localhost:4000/unlimited-ai-calls" rel="alternate" type="text/html" title="The Curious Case of Unlimited AI Calls" /><published>2025-02-09T00:00:00+05:30</published><updated>2025-02-09T00:00:00+05:30</updated><id>http://localhost:4000/unlimited-ai-calls</id><content type="html" xml:base="http://localhost:4000/unlimited-ai-calls">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Imagine walking into a coffee shop that charges for refills. You get your first cup, but instead of paying for more, you find a secret trick to keep getting unlimited refills—all without the cashier noticing. Sounds fun, right? Well, something similar happened in the digital world with an AI-powered platform that charged users for making AI requests. Due to a simple yet impactful vulnerability, it was possible to override the limit and get unlimited AI requests—for free.&lt;/p&gt;

&lt;p&gt;Let’s dive into how this issue worked, why it happened, and what security professionals can learn from it.&lt;/p&gt;

&lt;h2 id=&quot;the-ai-that-didnt-know-when-to-stop&quot;&gt;The AI That Didn’t Know When to Stop&lt;/h2&gt;

&lt;p&gt;The AI platform in question allowed users to generate content using artificial intelligence. Users on free accounts were given a limited number of AI requests, and once they hit the limit, they had to either wait or upgrade to a paid plan. This limit was meant to ensure fair usage and encourage users to subscribe.&lt;/p&gt;

&lt;p&gt;But here’s where things got interesting: instead of enforcing these limits strictly on the backend, the system relied on information &lt;strong&gt;sent from the client-side&lt;/strong&gt;. This means the application itself was telling the server, “Hey, I’ve hit my limit!”—something that, as a security researcher, immediately caught my attention.&lt;/p&gt;

&lt;h2 id=&quot;how-the-bug-worked&quot;&gt;How the Bug Worked&lt;/h2&gt;

&lt;p&gt;This AI service had an API endpoint that handled AI requests:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /designer-api/api/v1/generation-prompt HTTP/1.1
Host: api.example.com
Authorization: Bearer &amp;lt;user_token&amp;gt;
Content-Type: application/json

{
  &quot;prompt&quot;: &quot;Generate an AI response&quot;,
  &quot;stats&quot;: {
    &quot;remaining_calls&quot;: 15,
    &quot;limit&quot;: 15
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Each request contained a &lt;strong&gt;stats&lt;/strong&gt; section that included details about the user’s usage limits. Normally, when a user reached their limit, they would get a &lt;strong&gt;429 Too Many Requests&lt;/strong&gt; error:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.1 429 Too Many Requests
Content-Type: application/json

{
  &quot;error&quot;: &quot;Rate limit exceeded&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But what if we could simply &lt;strong&gt;change the number&lt;/strong&gt; in the request body before it reached the server? That’s exactly what was possible here! By modifying the stats section, an attacker could:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Trick the system into thinking they still had AI requests left&lt;/li&gt;
  &lt;li&gt;Continue making API calls well beyond the intended limit&lt;/li&gt;
  &lt;li&gt;Effectively get an &lt;strong&gt;unlimited&lt;/strong&gt; AI service for free&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;visual-breakdown-of-the-issue&quot;&gt;Visual Breakdown of the Issue&lt;/h3&gt;

&lt;div class=&quot;mermaid&quot;&gt;
sequenceDiagram
    participant User
    participant Client
    participant Server
    User-&amp;gt;&amp;gt;Client: Sends AI request
    Client-&amp;gt;&amp;gt;Server: {&quot;remaining_calls&quot;: 15, &quot;limit&quot;: 15}
    Note right of User: Modifies request body
    Client-&amp;gt;&amp;gt;Server: {&quot;remaining_calls&quot;: 100, &quot;limit&quot;: 100}
    Server-&amp;gt;&amp;gt;Client: AI response (No rate limit enforcement)
&lt;/div&gt;

&lt;h2 id=&quot;why-did-this-happen&quot;&gt;Why Did This Happen?&lt;/h2&gt;

&lt;h3 id=&quot;1-trusting-client-side-data&quot;&gt;1. &lt;strong&gt;Trusting Client-Side Data&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;One of the golden rules of security is &lt;strong&gt;never trust user input&lt;/strong&gt;—and that includes request data. The AI platform mistakenly relied on a value in the request body to determine rate limits instead of tracking it properly on the server side.&lt;/p&gt;

&lt;h3 id=&quot;2-lack-of-server-side-validation&quot;&gt;2. &lt;strong&gt;Lack of Server-Side Validation&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;A well-designed system should verify limits &lt;strong&gt;independently&lt;/strong&gt; on the backend. In this case, since the API simply accepted what the request told it, there was no mechanism ensuring that the limit was actually being enforced.&lt;/p&gt;

&lt;h3 id=&quot;3-failure-to-use-secure-tokens-or-signatures&quot;&gt;3. &lt;strong&gt;Failure to Use Secure Tokens or Signatures&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Many modern APIs use cryptographic signatures (like HMAC) to verify request integrity. Had this platform signed the request metadata, any tampering would have been detected.&lt;/p&gt;

&lt;h2 id=&quot;lessons-for-security-professionals&quot;&gt;Lessons for Security Professionals&lt;/h2&gt;

&lt;h3 id=&quot;-enforce-rate-limits-server-side&quot;&gt;🔹 &lt;strong&gt;Enforce Rate Limits Server-Side&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Never rely on client-side values for enforcing restrictions. Always track API usage in a backend database or a secure session store.&lt;/p&gt;

&lt;h3 id=&quot;-use-immutable-request-metadata&quot;&gt;🔹 &lt;strong&gt;Use Immutable Request Metadata&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Instead of allowing the request body to dictate limits, the system should generate and store limits on the server side, making them read-only for users.&lt;/p&gt;

&lt;h3 id=&quot;-monitor-anomalous-activity&quot;&gt;🔹 &lt;strong&gt;Monitor Anomalous Activity&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Rate-limiting dashboards and API monitoring tools can detect when a single user is making an unusually high number of requests, preventing abuse.&lt;/p&gt;

&lt;p&gt;For an in-depth guide on API security, check out the &lt;a href=&quot;https://owasp.org/www-project-api-security/&quot;&gt;OWASP API Security Top 10&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This case highlights a fundamental security lesson: &lt;strong&gt;never trust the client to enforce security rules&lt;/strong&gt;. Whether it’s API rate limiting, authentication, or access control, these checks should always be handled &lt;strong&gt;on the server&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Interestingly, after responsibly disclosing this issue, the company’s security team acknowledged the value of the report, stating it was one of the most impactful submissions they had received from an external researcher. As a token of appreciation, they issued a &lt;strong&gt;$800 reward&lt;/strong&gt;—a rare gesture that underscores the importance of proactive security research.&lt;/p&gt;

&lt;p&gt;Have you encountered a similar vulnerability? Let’s discuss in the comments below!&lt;/p&gt;</content><author><name>Saransh Saraf</name></author><category term="posts" /><category term="API" /><category term="Security," /><category term="Rate" /><category term="Limiting," /><category term="Penetration" /><category term="Testing," /><category term="Bug" /><category term="Bounty," /><category term="Ethical" /><category term="Hacking," /><category term="Security" /><category term="Research," /><category term="Web" /><category term="Security," /><category term="OWASP," /><category term="Server-Side" /><category term="Validation," /><category term="API" /><category term="Abuse," /><category term="Cybersecurity," /><category term="Responsible" /><category term="Disclosure," /><category term="AI" /><category term="Security" /><summary type="html">Introduction</summary></entry><entry><title type="html">Too Bad for Business - an IDOR Vulnerability</title><link href="http://localhost:4000/too-bad-for-business" rel="alternate" type="text/html" title="Too Bad for Business - an IDOR Vulnerability" /><published>2025-01-30T00:00:00+05:30</published><updated>2025-01-30T00:00:00+05:30</updated><id>http://localhost:4000/too-bad-for-business</id><content type="html" xml:base="http://localhost:4000/too-bad-for-business">&lt;p&gt;Whether you’re 15 or 60, you’ve probably heard of and used an e-signature application at least once. These apps are meant to help share confidential documents for signing, so it’s no surprise that keeping documents safe from hackers is a key part of their business.&lt;/p&gt;

&lt;p&gt;But, of course, nothing is ever that easy, if it were, it wouldn’t be life! These apps usually come with certain features to securely share documents, including strict rules on how the documents can be opened and how long they stay accessible. The person managing the application (the Instance Administrator) can adjust these settings based on what they or their company needs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/e-sign-app-struct.png&quot; alt=&quot;E-Signature-Application&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some of the basic features from this set are,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Document Editing&lt;/li&gt;
  &lt;li&gt;Signing Field Mapping&lt;/li&gt;
  &lt;li&gt;Sharing Document for Signature&lt;/li&gt;
  &lt;li&gt;Document Download (Sender and Receiver, on both ends), and etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Implementing these features securely is a challenge on its own, not to mention keeping the same format and quality across all parts of the application.&lt;/p&gt;

&lt;p&gt;I recently came across a similar case during one of my testing projects. It was a well-known but mid-sized company/product, with strong security against Insecure Direct Object Reference (IDOR), though I did find a few low-severity bugs.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I spent a couple of hours reviewing everything, and while I had four low-severity bugs on my list, there weren’t any other clear vulnerabilities to exploit so, I shifted my focus to learning more about the application.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;On their data protection policy page, I found that they store every document on AWS, with encryption at rest and a valid access token required to access the documents. Sounds pretty secure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/doc-tran-aws.png&quot; alt=&quot;Document-Transaction&quot; class=&quot;iod&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Uploading the document and linking it to the user account seemed secure enough, but let’s be honest—that’s not the fun part to exploit. If I could somehow get access to documents from other accounts… now that would be interesting!&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I set up some documents and started the signing request process. However, the URL provided to the end user for accessing the document fetched it directly from the application server. The application was temporarily storing the document on its own server as a failsafe mechanism.
To understand this better, I recommend watching this &lt;a href=&quot;https://www.youtube.com/watch?v=tEpn-6dBn-M&amp;amp;t=330&quot; target=&quot;_blank&quot;&gt;Project Air video&lt;/a&gt;. It explains a similar issue in a really simple way.&lt;/p&gt;

&lt;p&gt;If that wasn’t clear, here’s a quick summary: Loading the document from AWS would mean somehow sharing the keys and a valid token with the end user, which is hard to secure. The user could extract those credentials and keep access to the document, including any future updates. Or the application would need to constantly regenerate and update those credentials everywhere.&lt;/p&gt;

&lt;p&gt;To avoid this hassle, the application temporarily stores the document on its server, and once the signing is done, it updates the document on AWS. Even the download button on the user end just created a PDF of the loaded document and exported it. It seemed too good to be true, everything has vulnerabilities, right? So, I decided to test the same feature from the customer’s end.&lt;/p&gt;

&lt;p&gt;When opening the document initially, the application did use AWS directly, and after editing, it uploaded the updated document back to AWS. The credentials used to fetch the document from AWS were stored under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/organization/users/&amp;lt;ID&amp;gt;/documents&lt;/code&gt; object, and the request wasn’t vulnerable to IDOR.&lt;/p&gt;

&lt;p&gt;I dug deeper and found the download document button. When clicked, it opened a new tab with a PDF viewer, where the user is supposed to download the document. The most interesting part, though, is the underlying API requests.
When the download button is pressed, the application sends a request to the server to get the credentials for the document at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/documents/&amp;lt;numerical ID&amp;gt;/creds&lt;/code&gt;. And you guessed it, it was indeed vulnerable to IDOR.&lt;/p&gt;

&lt;p&gt;Upon requesting a valid documentID, the application responsed with :&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;url&quot;:&quot;AWS document url&quot;,
    &quot;fields&quot;:{
        &quot;key&quot;:&quot;document key&quot;,
        &quot;contentType&quot;:&quot;application/pdf&quot;,
        &quot;xawzCredential&quot;:&quot;credential&quot;,
        &quot;xawzAlgorythm&quot;:&quot;some value&quot;,
        &quot;xawzDate&quot;:&quot;timestamp&quot;,
        &quot;xaszSignature&quot;:&quot;value&quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I gained access to all the documents ever uploaded to the e-signature application, whether they were private or public, shared for signing or not.&lt;/p&gt;

&lt;p&gt;I hope you found some insights in this post. If you did or if you have suggestions to help me improve my writing, feel free to send me feedback using the button at the bottom of the page.&lt;/p&gt;

&lt;p&gt;Until next time,
Cheers!&lt;/p&gt;</content><author><name>Saransh Saraf</name></author><category term="posts" /><category term="idor," /><category term="aws," /><category term="e-signature," /><category term="document," /><category term="security," /><category term="information" /><category term="disclosure" /><summary type="html">Whether you’re 15 or 60, you’ve probably heard of and used an e-signature application at least once. These apps are meant to help share confidential documents for signing, so it’s no surprise that keeping documents safe from hackers is a key part of their business.</summary></entry><entry><title type="html">Hacking DNS Instance Applications Inside-Out</title><link href="http://localhost:4000/dns-instance-iba" rel="alternate" type="text/html" title="Hacking DNS Instance Applications Inside-Out" /><published>2024-04-16T00:00:00+05:30</published><updated>2024-04-16T00:00:00+05:30</updated><id>http://localhost:4000/dns-instance-IBA</id><content type="html" xml:base="http://localhost:4000/dns-instance-iba">&lt;p&gt;You may have already seen an application which provides you with a subdomain on the application domain based on your organization or team name, I call these applications, Instance Based Applications or IBA. There are many examples for these type of applications, such as Okta.com, Circle.so and github.com.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mr23r0.okta.com | mr23r0.github.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But there’s a difference in these applications internally as well as externally, some gives you ability to access your data and manage it through a custom organization subdomain and others just allow you to serve that data on organization subdomain, like okta gives you ability to manage your data through a subdomain and github just allows you publish your data on a subdomain, while using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.io&lt;/code&gt; domain to differentiate between the main application and published data.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:blue&quot;&gt;&lt;b&gt;Why do that? why not just use simple centralized subdomain like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;portal&lt;/code&gt; or something?&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
The answer to all these questions lies into the &lt;em&gt;psychology&lt;/em&gt; of the customer and the vendor, people have tendency to stick to places where they get some special treatment, additionally by receving a custom subdomain customers think that its isolated from the central application and they’re far away from the &lt;em&gt;Cyber Threats&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:blue&quot;&gt;&lt;b&gt;How much of this asumption is true? [Based on my research]&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;In reality there’s no way possible to create a sudomain on the fly (correct me if I’m wrong) and create a tenant specific copy of the application, although it’s possible for the databases, which is called multi-tenancy&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
What they do is, they point the wildcard domain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*.mr23r0.app&lt;/code&gt; to the main IP address and serve the same application on any subdomain [virtual] created. See the below code to understand it better :&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
    listen       80;
    server_name  app.mr23r0.app  *.mr23r0.app;
    root /path_to_your_site/public;
    passenger_enabled on;
    rails_env development;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So The application isn’t offering anything special to customers, but the illustion of giving custom special subdomains, which in reality doesn’t make any difference or enhances the security of the application, since every other thing in the backend is going through the same pipe or plate.
&lt;img src=&quot;/assets/img/dns-instance.png&quot; alt=&quot;DNS-Instance&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the last handful of months, I had the chance to learn and test these IBA applications, and there are some major security concerns that could be found in these applications, such as&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Insecure Direct Object Reference to Add yourself or the resource to any Organization&lt;/li&gt;
  &lt;li&gt;Organization Infinite Loop&lt;/li&gt;
  &lt;li&gt;Forced Claim to Organizations&lt;/li&gt;
  &lt;li&gt;Claiming Other’s Access Token&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span style=&quot;color:blue&quot;&gt;&lt;b&gt;Insecure Direct Object Reference to Add yourself to any Organization&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
Whenever you land on these type of Applications, On the registration page these applications ask you to create the resource, before the organization (seen in event management, site management and documentation applications) and after that the resource is assigned to the newly created organization.&lt;br /&gt; As you may have already got the idea, that this workflow of doing things is very prone to misconfigurations and weak implementation.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This example is from my test on an Event Hosting Application, which I discovered for the third time in this category of applications (IBA)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;On the registration, the application asks the visitor to create an event before moving ahead, the visitor does it and gets the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eventId&lt;/code&gt; in response, nothing too suspicious, in the next onboarding step application asks the user to create his/her account with all the best practices implemented but in the last two steps the application asks the user to create and organization but as soon as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;orgId&lt;/code&gt; is returned in the repsponse, the application makes a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATCH&lt;/code&gt; request&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; to the backend to add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userId&lt;/code&gt; along with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eventId&lt;/code&gt; to the organization &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/api/v3/orgAdditionOperation&lt;/code&gt; with the json body&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;orgId&quot;:&quot;UUID2&quot;,
    &quot;user&quot;:{
        &quot;id&quot;:&quot;&quot;,
        &quot;eventId&quot;:Integer
        }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;the only to handle this properly is to use a flag of some sort to detect if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;orgId&lt;/code&gt; organization is newly created or the old one, which can prevent the malicous attackers from joining the already active organization, but there wasn’t such implementation.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:blue&quot;&gt;&lt;b&gt;Organization Infinite Loop&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
During the onboarding process of these applications, you get the option to select and claim a unique subdomain to access your application, the http request may look something like this&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PUT /api/v3/orgOperation
Host:
&amp;lt;headers&amp;gt;

{
    &quot;subdomain&quot;:&quot;mr23r0&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Its important to understand that, some applications only allow you to do this only one time and no way to change the sudomain aferwards but other applications allow you to change this afterwards as well.
The interesting thing is, that in the example server config, the application has used a wildcard, therefore the application should also respond to non claimable subdomains like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docs&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crm&lt;/code&gt; etc, which may cause an internal server conflict since the DNS Server&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; would have both, static application address and the main application address. to prevent this the developers implement a blocklist of subdomains that could not be claimed, and rejected if requested, But this is a bit complex to handle and people are lazy.
&lt;img src=&quot;/assets/img/assign-logic.png&quot; alt=&quot;DNS-Instance&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In my case people weren’t lazy and did a secure implementation on the &lt;em&gt;onboarding process&lt;/em&gt;, but this onboarding process is done by a visitor, so there should be two different components to handle this, first on the onboarding and the second on the organization administration settings, In my case the request from the administrative settings looked like this, and didn’t had backend verification using a blocklist.
&lt;img src=&quot;/assets/img/bad-assign-logic.png&quot; alt=&quot;DNS-Instance&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PATCH /api/v3/orgOperation/admin/UUID2
HOST : 
&amp;lt;headers&amp;gt;

{
    &quot;subdomain&quot;:&quot;mr23r0&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As soon as the new subdomain gets assigned to the organization, the previous subdomain will no longer be a valid one, and the application redirects the administrator to the new subdomain, but the new subdomain is a static site and redirects the user to the designated subdomain, creating a never ending loop. Ultimetly the browser gets &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;too many redirects&lt;/code&gt; and the organization data will no longer be accessiable.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:blue&quot;&gt;&lt;b&gt;Force Claim Organizations&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
On the same organization administrative settings request, if someone puts a subdomain which is already in use by some other organization, the application throws an error “subdomain already in use”, There’s also absense of limit on how frequently you can change the subdomain.&lt;br /&gt;
By following race condition&lt;sup id=&quot;fnref:4&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; approach, and sending a handful of unique and an already in use subdomain in a row (4 unique, 6-10 times single already in use subdomain) the application fails to handle all the requests in a short period of time and returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;500 Internal Server Error&lt;/code&gt; but assigns the subdomain to both organizations.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:blue&quot;&gt;&lt;b&gt;Claiming Other’s Access Token&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
Coming back to the application onboarding flow, resource has been created, user account has been created, &lt;em&gt;without email verification&lt;/em&gt;, as soon as the user and the organization is being linked, the API returns a temporary access token to login the user for the &lt;em&gt;first time in the organization&lt;/em&gt;, so what’s the attack? what can you leverage here, you might be asking this question by now, so read this block once more, focus on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;italic&lt;/code&gt; fonts.
I notice two things :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Without Email Verification&lt;/li&gt;
  &lt;li&gt;Login first time, in newly created organization&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the application doesn’t verifies the ownership of the email, before handing-out the access token, it’s already bad but, it can be further followed to a much higher risk.&lt;br /&gt;
Since we have this behavior in the application, We can create a new organization with the victim’s email, and get the one-time access token, following the ideal flow. Instance Based Applications, while they are internally stand as a centraliezed (sigular) application but use header like referer and orgin to seperate the different DNS instance data, so the token should have resource access assigned in some way, Ideally.
&lt;img src=&quot;/assets/img/dns-token-generation.png&quot; alt=&quot;DNS-Instance&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This can be tested, by trying to use the token on the previously created organization, the token should not allow you to access the previously created organization, since there’s no possible way to switch between the organizations using the application UI, user must login into the second instance to access it.
Ultimately, we got the access of the target instance with just by knowing an email address, funny isn’t it?&lt;/p&gt;

&lt;p&gt;As we wrap up, I want to suggest that you learn whatever interests you and get really good at it. It’s always useful in some way, and keep dreaming until you can make those dreams real. Thanks!&lt;/p&gt;

&lt;hr data-content=&quot;footnotes&quot; /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.gooddata.com/blog/multi-tenant-architecture/&quot; target=&quot;_blank&quot;&gt;Multi-tenancy&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods&quot; target=&quot;_blank&quot;&gt;Requests - HTTP Verbs&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.cloudflare.com/learning/dns/what-is-a-dns-server/&quot; target=&quot;_blank&quot;&gt;DNS Server&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.techtarget.com/searchstorage/definition/race-condition&quot; target=&quot;_blank&quot;&gt;Race Condition&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Saransh Saraf</name></author><category term="posts" /><category term="dns," /><category term="hacking," /><category term="penetration" /><category term="testing," /><category term="bug" /><category term="bounty," /><category term="dns" /><category term="hacking," /><category term="dns" /><category term="implementation" /><summary type="html">You may have already seen an application which provides you with a subdomain on the application domain based on your organization or team name, I call these applications, Instance Based Applications or IBA. There are many examples for these type of applications, such as Okta.com, Circle.so and github.com. mr23r0.okta.com | mr23r0.github.io</summary></entry><entry><title type="html">Four(4) tions of Penetration</title><link href="http://localhost:4000/four-4-tions-of-penetration" rel="alternate" type="text/html" title="Four(4) tions of Penetration" /><published>2024-02-02T00:00:00+05:30</published><updated>2024-02-02T00:00:00+05:30</updated><id>http://localhost:4000/four-4-tions-of-penetration</id><content type="html" xml:base="http://localhost:4000/four-4-tions-of-penetration">&lt;h3 id=&quot;index&quot;&gt;Index&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#selection&quot;&gt;Selection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#detection&quot;&gt;Detection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#relation&quot;&gt;Relation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction&quot;&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After my last extensive vulnerability test&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, I got the taste of site management applications and had a craving to do more of similar kinds. This post will elaborate the target selection, a series of tests and the way I managed to make a good working relationship with the company.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The site management applications I choose typically include the capability of creating and managing multiple sites in one account and also supports team management.&lt;/p&gt;

&lt;h3 id=&quot;selection&quot;&gt;&lt;a href=&quot;#selection&quot;&gt;Selection&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I invested about 8-9 days after which I realised that Google Dorks&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; are not the best way of finding similar products and applications, then I remembered about &lt;a href=&quot;https://crunchbase.com&quot; target=&quot;_blank&quot;&gt;Crunchbase&lt;/a&gt; and how helpful it is in finding similar products and applications.&lt;br /&gt;
I made a list of 12 similar applications and started looking in the archive logs&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; for these applications.&lt;/p&gt;

&lt;p&gt;During the detection process, I found the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;email&lt;/code&gt; query parameter in the unsubscribe path and after testing I found that I can change the user email preferences without proper authentication and authorization, therefore I assumed that there is a high possibility of more bugs in the application and I contacted the CTO of the company.&lt;/p&gt;

&lt;h3 id=&quot;detection&quot;&gt;&lt;a href=&quot;#detection&quot;&gt;Detection&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As soon as I got a green flag from the CTO, I initiated my tests with creating two accounts in the same team.&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;broken-access-control&quot;&gt;Broken Access Control&lt;/h4&gt;
&lt;p&gt;After checking small amount of things on the application, I shifted my focus to break the &lt;a href=&quot;https://www.cloudflare.com/learning/cloud/what-is-multitenancy&quot; target=&quot;_blank&quot;&gt;Multitenancy&lt;/a&gt; of the application, therefore I deleted one account from the same team while the user was loggedin. I quickly realised that the user’s access and the session is not revoked, and the removed user still has all the administrator privileges.&lt;/p&gt;

&lt;h4 id=&quot;magic-link-reverse-engineering&quot;&gt;Magic Link Reverse Engineering&lt;/h4&gt;
&lt;p&gt;After creating an account for the previously removed user, the first time login magic link caught my attention &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;instance&amp;gt;.censored.com/editor/login?password_set=y&amp;amp;account=true&amp;amp;a=&amp;lt;victim&apos;s username&amp;gt;&lt;/code&gt;&lt;br /&gt;
 So I checked my first account and solved the puzzle of all the query parameters and using the crafted link, I was able to get into the first account without authentication.&lt;/p&gt;

&lt;h4 id=&quot;account-takeover&quot;&gt;Account Takeover&lt;/h4&gt;
&lt;p&gt;Magic link reverse engineering filled me with a sense of amazement.
 Then I started an extensive test on the registration process, while creating the third account, I noticed a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt; request&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /signupajax-v3 HTTP/1.1
Host: censored.com
Connection: close
Content-Length: 359
sec-ch-ua: &quot;Not_A Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;120&quot;, &quot;Google Chrome&quot;;v=&quot;120&quot;
Accept: */*
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
X-Requested-With: XMLHttpRequest
sec-ch-ua-mobile: ?0
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36
sec-ch-ua-platform: &quot;Linux&quot;
Origin: https://censored.com
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: cors
Sec-Fetch-Dest: empty
Referer: https://censored.com/signup
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Cookie: &amp;lt;cookies&amp;gt;

siteName=myThirdAccountSite&amp;amp;siteUrl=myThirdAccountSite&amp;amp;evstart=&amp;amp;adminEmail=root@mr23r0.rocks&amp;amp;duplicate=false&amp;amp;hash=&amp;lt;hash&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I changed the email to the first account email, received a magic link in response, by using the magic link I was able to get into the first account, not only this I was also able to navigate between account sites and make changes.&lt;/p&gt;

&lt;h3 id=&quot;relation&quot;&gt;&lt;a href=&quot;#relation&quot;&gt;Relation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When I initially contacted the CTO of the company, although he gave me a green flag but specifically mentioned that he has a tight budget and won’t be able to provide reward (bounty), but when I submitted the report he appreciated my work and squeezed the company’s budget a bit to show their gratitude.&lt;/p&gt;

&lt;hr data-content=&quot;footnotes&quot; /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://mr23r0.github.io/code-flaws-part-1.html&quot; target=&quot;_blank&quot;&gt;Code flaws leads to Organization Account Takeover&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://book.hacktricks.xyz/generic-methodologies-and-resources/external-recon-methodology/github-leaked-secrets&quot; target=&quot;_blank&quot;&gt;Google Dorks&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://mr23r0.github.io/uncovering-the-secrets-part-1.html&quot; target=&quot;_blank&quot;&gt;The Potential of Web archive in bug bounty programs&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Saransh Saraf</name></author><category term="posts" /><category term="penetration" /><category term="testing," /><category term="bug" /><category term="bounty," /><category term="site" /><category term="management," /><category term="application," /><category term="security" /><summary type="html">Index Introduction Selection Detection Relation</summary></entry><entry><title type="html">Defying Paywalls in the Pursuit of Knowledge, Just as Dad Envisioned</title><link href="http://localhost:4000/read-anything" rel="alternate" type="text/html" title="Defying Paywalls in the Pursuit of Knowledge, Just as Dad Envisioned" /><published>2024-01-31T00:00:00+05:30</published><updated>2024-01-31T00:00:00+05:30</updated><id>http://localhost:4000/read-anything</id><content type="html" xml:base="http://localhost:4000/read-anything">&lt;h3 id=&quot;index&quot;&gt;Index&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#user-interface&quot;&gt;User Interface&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#under-the-hood&quot;&gt;Under The Hood&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction&quot;&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;In my pursuit of knowledge within a digital audiobook and PDF service, I uncovered a noteworthy security vulnerability that facilitated unrestricted access to all content, including unpublished manuscripts, without the need for a subscription. &lt;br /&gt;
This exploration stemmed from the belief instilled by my father, emphasizing the inherent freedom of knowledge in contrast to the prevailing model that demanded substantial financial investments for each literary endeavor.&lt;/p&gt;

&lt;h3 id=&quot;user-interface&quot;&gt;&lt;a href=&quot;#user-interface&quot;&gt;User Interface&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As a regular user navigating the platform, my initial attempts to access content without a subscription through the user interface proved unfruitful.&lt;br /&gt;
Serendipitously, I stumbled upon the authors’ subdomain—a space dedicated to writing and publishing. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://community.censored.com&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;
However, despite this discovery, the conventional interface lacked a straightforward method to access the literary works of others without financial obligations, indicating a critical gap in user accessibility.&lt;/p&gt;

&lt;h3 id=&quot;under-the-hood&quot;&gt;&lt;a href=&quot;#under-the-hood&quot;&gt;Under The Hood&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Transitioning into a more technical exploration, I meticulously scrutinized the functionality of the authors’ subdomain. Through the monitoring of network requests, a fascinating revelation emerged: the submission of a book for review triggered a browser request to open the submitted book.&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /api/v1/spark/novels/{Integer_IDs}/
Host: community.censored.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Seizing this opportunity, I exploited the system by modifying the numerical book IDs in the requests. Given that the book IDs were numerical, I successfully engaged in a brute force attack, systematically testing and accessing different IDs. This not only granted unauthorized access to my own submissions but also to the works of fellow authors, spotlighting a critical security vulnerability in the nuanced interplay between the author’s submission process and the underlying review infrastructure.&lt;/p&gt;</content><author><name>Saransh Saraf</name></author><category term="posts" /><category term="digital" /><category term="audiobook," /><category term="pdf," /><category term="security," /><category term="vulnerability," /><category term="bug" /><category term="bounty" /><summary type="html">Index Introduction User Interface Under The Hood</summary></entry><entry><title type="html">01 HTML Injection | Web 101</title><link href="http://localhost:4000/html-injection-guide" rel="alternate" type="text/html" title="01 HTML Injection | Web 101" /><published>2023-12-30T00:00:00+05:30</published><updated>2023-12-30T00:00:00+05:30</updated><id>http://localhost:4000/html-injection-guide</id><content type="html" xml:base="http://localhost:4000/html-injection-guide">&lt;h3 id=&quot;index&quot;&gt;Index&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#html&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#weaponize&quot;&gt;Weaponize&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#detection&quot;&gt;Detection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#bypass&quot;&gt;Bypass&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rw-examples&quot;&gt;RW Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction&quot;&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In the realm of web security, understanding vulnerabilities is crucial. HTML Injection stands as a pivotal point in this landscape, representing a vulnerability that can compromise the integrity of web applications.
This technique, while seeming innocuous at first glance, poses a significant threat by allowing attackers to manipulate a webpage’s content, structure, or functionality. For web testers and security professionals, comprehending HTML Injection is paramount. It serves as a means to evaluate and fortify web applications, ensuring they are robust enough to withstand such attacks.&lt;/p&gt;

&lt;h3 id=&quot;html&quot;&gt;&lt;a href=&quot;#html&quot;&gt;HTML&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;HTML, or Hypertext Markup Language, is the standard language used to create web pages. HTML is composed of various elements and tags that define the structure of a web page.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;My Web Page&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

    &amp;lt;h1&amp;gt;Welcome to My Page!&amp;lt;/h1&amp;gt;
    
    &amp;lt;p&amp;gt;This is a paragraph of text.&amp;lt;/p&amp;gt;
    
    &amp;lt;img src=&quot;https://images.theconversation.com/files/450362/original/file-20220307-121610-zfik1f.jpeg&quot; alt=&quot;A beautiful image&quot;&amp;gt;
    
    &amp;lt;a href=&quot;https://en.wikipedia.org/wiki/Dead_Poets_Society&quot;&amp;gt;Visit Dead Poets Socity&amp;lt;/a&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This basic HTML structure creates a webpage:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt; declares the document type and version of HTML being used (in this case, HTML5).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;html&amp;gt;&lt;/code&gt; encapsulates the entire content of the web page.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; contains meta-information about the document, such as the page title, character set, etc.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;title&amp;gt;&lt;/code&gt; sets the title of the webpage, which appears in the browser’s title bar or tab.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; contains the visible content of the webpage.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; is a heading tag used to create the main header.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; creates a paragraph of text.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;img&amp;gt;&lt;/code&gt; inserts an image with the specified source (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt;) and alternative text (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alt&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt; creates a hyperlink to another webpage specified in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;href&lt;/code&gt; attribute.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This HTML code, when rendered in a web browser, would display a simple webpage with a heading, a paragraph of text, an image, and a hyperlink.&lt;/p&gt;

&lt;h3 id=&quot;weaponize&quot;&gt;&lt;a href=&quot;#weaponize&quot;&gt;Weaponize&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Imagine HTML tags as building blocks that structure a webpage. Now, when one tag is placed inside another, it’s like nesting these building blocks. This nesting can lead to unintended consequences if not handled properly.&lt;/p&gt;

&lt;p&gt;For instance, if a website allows users to input text that gets displayed on the page, and this input isn’t properly sanitized (meaning, it’s not checked for harmful code), a user might enter HTML tags within their input.&lt;/p&gt;

&lt;p&gt;Let’s say a user innocently types something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;b&amp;gt;Hello&amp;lt;/b&amp;gt;&lt;/code&gt; in a comment section where bold text is not allowed through rich text editor. If the website doesn’t filter or neutralize these tags, the entire content following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;b&amp;gt;&lt;/code&gt; will become bold until it reaches &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;/b&amp;gt;&lt;/code&gt;. This is harmless in most cases and is called HTML injection, but it becomes a problem when malicious users deliberately input code that can harm the website or its visitors.&lt;/p&gt;

&lt;p&gt;For instance, an attacker might input JavaScript code within HTML tags. When other users view this comment, their browsers might execute this JavaScript, potentially performing actions like redirecting to malicious sites, stealing session cookies, or displaying unwanted content—things the website’s creators never intended.&lt;/p&gt;

&lt;p&gt;So, the crux here is that allowing unfiltered HTML tags within other HTML tags on a website’s client side (what users see and interact with) can open the door to unexpected and harmful actions if not properly managed or sanitized. It’s like allowing someone to rearrange the building blocks in a tower—while most rearrangements might be harmless, some configurations could make the tower unstable or even collapse.&lt;/p&gt;

&lt;h3 id=&quot;detection&quot;&gt;&lt;a href=&quot;#detection&quot;&gt;Detection&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Imagine you’re a web tester examining a site with input fields—like a search bar or a comment section. Your goal isn’t to break things but to find weaknesses that could allow someone with ill intentions to harm the website or its users.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Testing Input Fields:
 You start by typing harmless text into these fields to ensure they work properly. Then, you get crafty. Instead of regular words, you enter something sneaky: HTML tags or code snippets. For example, you might try typing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;alert(&quot;Test!&quot;)&amp;lt;/script&amp;gt;&lt;/code&gt; instead of plain text.&lt;/li&gt;
  &lt;li&gt;Playing with Scripts:
 When you hit enter, if a pop-up saying “Test!” appears, you’ve found a vulnerability. This is like discovering a secret passage in a castle by trying different keys in various doors.&lt;/li&gt;
  &lt;li&gt;Sneaky Cross-Site Scripting:
 Now, imagine you can make the website run a script that steals information or alters its content. By entering special code into an innocent-looking comment, you might make it so that when others view it, their browsers unknowingly run harmful scripts.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Manipulating HTML:
 Sometimes, you try changing things like an image’s address or link tags to point somewhere unexpected. It’s like pretending to be a magician and making things on the webpage disappear or go to the wrong places.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Crafty URL Tweaking: 
 Changing the website’s address slightly in the browser’s address bar might reveal hidden weaknesses. It’s akin to altering a treasure map to find hidden paths.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In essence, by playing around with HTML tags and injecting code in various parts of the website, you’re like a detective searching for clues. Your goal is to uncover these weaknesses before anyone with harmful intentions does, helping the website’s creators strengthen their defenses against potential attacks.&lt;/p&gt;

&lt;h3 id=&quot;bypass&quot;&gt;&lt;a href=&quot;#bypass&quot;&gt;Bypass&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Developers implement validators and escape mechanisms to protect websites from malicious input. However, attackers often craft specialized payloads to slip through these defenses. These crafted payloads are designed to bypass validators and encoding systems, enabling the injection of harmful HTML code.&lt;/p&gt;

&lt;p&gt;These bypass techniques involve manipulating input fields by inserting deceptive HTML tags or using encoded representations of tags. For instance,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Understanding Input Validation:
 Websites often have forms or input fields where users can submit information. Input validation is the process of checking this information to ensure it’s safe before displaying or processing it. If the validation process is weak or nonexistent, attackers can exploit this vulnerability.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bypassing Filters:
 Attackers attempt to bypass input filters or validation mechanisms by entering specially crafted strings that evade detection. They might use variations or combinations of HTML tags, special characters, or encoded representations of tags to confuse the validation process.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Encoding Techniques:
 Attackers might use encoding techniques like URL encoding (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%3Cscript%3E&lt;/code&gt;) or character encoding (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;lt;script&amp;amp;gt;&lt;/code&gt;) to disguise HTML tags and bypass filters that are looking for specific patterns of code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Context-Specific Attacks:
 Injection attacks can be context-specific. For instance, if a website allows certain HTML tags in comments but not in usernames, an attacker might try injecting malicious code in the allowed comment section to later affect other parts of the website where HTML injections are not expected.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Polyglot Injection:
 This technique involves crafting a string that is both valid in HTML and JavaScript. It aims to bypass filters that are focused on HTML while still executing JavaScript code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Whitespace Manipulation:
 Injecting code with spaces or newline characters can sometimes confuse filters, allowing malicious code to slip through undetected.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rw-examples&quot;&gt;&lt;a href=&quot;#rw-examples&quot;&gt;RW Examples&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hackerone.com/reports/181810&quot; target=&quot;_blank&quot;&gt;Hackerone&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hackerone.com/reports/1581499&quot; target=&quot;_blank&quot;&gt;Hackerone&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hackerone.com/reports/1537149&quot; target=&quot;_blank&quot;&gt;Hackerone&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hackerone.com/reports/381553&quot; target=&quot;_blank&quot;&gt;Hackerone - Personal Favourite&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hackerone.com/reports/150179&quot; target=&quot;_blank&quot;&gt;Hackerone - Personal Favourite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Saransh Saraf</name></author><category term="guides" /><category term="html," /><category term="injection," /><category term="web," /><category term="penetration" /><category term="testing," /><category term="bug" /><category term="bounty," /><category term="security" /><summary type="html">Index Introduction HTML Weaponize Detection Bypass RW Examples</summary></entry></feed>