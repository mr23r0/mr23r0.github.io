<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-10-13T00:27:03+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">[mr23r0] Saransh Saraf</title><subtitle>One place to share everything necessery</subtitle><author><name>Saransh Saraf</name></author><entry><title type="html">Too Bad for Business - an IDOR Vulnerability</title><link href="http://localhost:4000/too-bad-for-business" rel="alternate" type="text/html" title="Too Bad for Business - an IDOR Vulnerability" /><published>2024-10-12T00:00:00+05:30</published><updated>2024-10-12T00:00:00+05:30</updated><id>http://localhost:4000/too-bad-for-business</id><content type="html" xml:base="http://localhost:4000/too-bad-for-business">&lt;p&gt;Whether you’re 15 or 60, you’ve probably heard of and used an e-signature application at least once. These apps are meant to help share confidential documents for signing, so it’s no surprise that keeping documents safe from hackers is a key part of their business.&lt;/p&gt;

&lt;p&gt;But, of course, nothing is ever that easy, if it were, it wouldn’t be life! These apps usually come with certain features to securely share documents, including strict rules on how the documents can be opened and how long they stay accessible. The person managing the application (the Instance Administrator) can adjust these settings based on what they or their company needs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/e-sign-app-struct.png&quot; alt=&quot;E-Signature-Application&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some of the basic features from this set are,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Document Editing&lt;/li&gt;
  &lt;li&gt;Signing Field Mapping&lt;/li&gt;
  &lt;li&gt;Sharing Document for Signature&lt;/li&gt;
  &lt;li&gt;Document Download (Sender and Receiver, on both ends), and etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Implementing these features securely is a challenge on its own, not to mention keeping the same format and quality across all parts of the application.&lt;/p&gt;

&lt;p&gt;I recently came across a similar case during one of my testing projects. It was a well-known but mid-sized company/product, with strong security against Insecure Direct Object Reference (IDOR), though I did find a few low-severity bugs.
I spent a couple of hours reviewing everything, and while I had four low-severity bugs on my list, there weren’t any other clear vulnerabilities to exploit. I shifted my focus to learning more about the application. On their data protection policy page, I found that they store every document on AWS, with encryption at rest and a valid access token required to access the documents. Sounds pretty secure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/doc-tran-aws.png&quot; alt=&quot;Document-Transaction&quot; class=&quot;iod&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Uploading the document and linking it to the user account seemed secure enough, but let’s be honest—that’s not the fun part to exploit. If I could somehow get access to documents from other accounts… now that would be interesting!
I set up some documents and started the signing request process. However, the URL provided to the end user for accessing the document fetched it directly from the application server. The application was temporarily storing the document on its own server as a failsafe mechanism.
To understand this better, I recommend watching this &lt;a href=&quot;https://www.youtube.com/watch?v=tEpn-6dBn-M&amp;amp;t=330&quot;&gt;Project Air video&lt;/a&gt;. It explains a similar issue in a really simple way.&lt;/p&gt;

&lt;p&gt;If that wasn’t clear, here’s a quick summary: Loading the document from AWS would mean somehow sharing the encryption keys and a valid token with the end user, which is hard to secure. The user could extract those credentials and keep access to the document, including any future updates. Or the application would need to constantly regenerate and update those credentials everywhere. To avoid this hassle, the application temporarily stores the document on its server, and once the signing is done, it updates the document on AWS.&lt;/p&gt;

&lt;p&gt;Even the download button on the user end just created a PDF of the loaded document and exported it. It seemed too good to be true, everything has vulnerabilities, right? So, I decided to test the same feature from the customer’s end.&lt;/p&gt;

&lt;p&gt;When opening the document initially, the application did use AWS directly, and after editing, it uploaded the updated document back to AWS. The credentials used to fetch the document from AWS were stored under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/organization/users/&amp;lt;ID&amp;gt;/documents&lt;/code&gt; object, and the request wasn’t vulnerable to IDOR.&lt;/p&gt;

&lt;p&gt;I dug deeper and found the download document button. When clicked, it opened a new tab with a PDF viewer, where the user is supposed to download the document. The most interesting part, though, is the underlying API requests.
When the download button is pressed, the application sends a request to the server to get the credentials for the document at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/documents/&amp;lt;numerical ID&amp;gt;/creds&lt;/code&gt;. And you guessed it, it was indeed vulnerable to IDOR.&lt;/p&gt;

&lt;p&gt;Upon requesting a valid documentID, the application responsed with :&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;url&quot;:&quot;AWS document url&quot;,
    &quot;fields&quot;:{
        &quot;key&quot;:&quot;document key&quot;,
        &quot;contentType&quot;:&quot;application/pdf&quot;,
        &quot;xawzCredential&quot;:&quot;credential&quot;,
        &quot;xawzAlgorythm&quot;:&quot;some value&quot;,
        &quot;xawzDate&quot;:&quot;timestamp&quot;,
        &quot;xaszSignature&quot;:&quot;value&quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I gained access to all the documents ever uploaded to the e-signature application, whether they were private or public, shared for signing or not.&lt;/p&gt;

&lt;p&gt;I hope you found some insights in this post. If you did or if you have suggestions to help me improve my writing, feel free to send me feedback using the button at the bottom of the page.&lt;/p&gt;

&lt;p&gt;Until next time,
Cheers!&lt;/p&gt;</content><author><name>Saransh Saraf</name></author><category term="posts" /><category term="idor" /><summary type="html">Whether you’re 15 or 60, you’ve probably heard of and used an e-signature application at least once. These apps are meant to help share confidential documents for signing, so it’s no surprise that keeping documents safe from hackers is a key part of their business.</summary></entry><entry><title type="html">Hacking DNS Instance Applications Inside-Out</title><link href="http://localhost:4000/dns-instance-iba" rel="alternate" type="text/html" title="Hacking DNS Instance Applications Inside-Out" /><published>2024-04-16T00:00:00+05:30</published><updated>2024-04-16T00:00:00+05:30</updated><id>http://localhost:4000/dns-instance-IBA</id><content type="html" xml:base="http://localhost:4000/dns-instance-iba">&lt;p&gt;You may have already seen an application which provides you with a subdomain on the application domain based on your organization or team name, I call these applications, Instance Based Applications or IBA. There are many examples for these type of applications, such as Okta.com, Circle.so and github.com.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mr23r0.okta.com | mr23r0.github.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But there’s a difference in these applications internally as well as externally, some gives you ability to access your data and manage it through a custom organization subdomain and others just allow you to serve that data on organization subdomain, like okta gives you ability to manage your data through a subdomain and github just allows you publish your data on a subdomain, while using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.io&lt;/code&gt; domain to differentiate between the main application and published data.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:blue&quot;&gt;&lt;b&gt;Why do that? why not just use simple centralized subdomain like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;portal&lt;/code&gt; or something?&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
The answer to all these questions lies into the &lt;em&gt;psychology&lt;/em&gt; of the customer and the vendor, people have tendency to stick to places where they get some special treatment, additionally by receving a custom subdomain customers think that its isolated from the central application and they’re far away from the &lt;em&gt;Cyber Threats&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:blue&quot;&gt;&lt;b&gt;How much of this asumption is true? [Based on my research]&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;In reality there’s no way possible to create a sudomain on the fly (correct me if I’m wrong) and create a tenant specific copy of the application, although it’s possible for the databases, which is called multi-tenancy&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
What they do is, they point the wildcard domain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*.mr23r0.app&lt;/code&gt; to the main IP address and serve the same application on any subdomain [virtual] created. See the below code to understand it better :&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
    listen       80;
    server_name  app.mr23r0.app  *.mr23r0.app;
    root /path_to_your_site/public;
    passenger_enabled on;
    rails_env development;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So The application isn’t offering anything special to customers, but the illustion of giving custom special subdomains, which in reality doesn’t make any difference or enhances the security of the application, since every other thing in the backend is going through the same pipe or plate.
&lt;img src=&quot;/assets/img/dns-instance.png&quot; alt=&quot;DNS-Instance&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the last handful of months, I had the chance to learn and test these IBA applications, and there are some major security concerns that could be found in these applications, such as&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Insecure Direct Object Reference to Add yourself or the resource to any Organization&lt;/li&gt;
  &lt;li&gt;Organization Infinite Loop&lt;/li&gt;
  &lt;li&gt;Forced Claim to Organizations&lt;/li&gt;
  &lt;li&gt;Claiming Other’s Access Token&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span style=&quot;color:blue&quot;&gt;&lt;b&gt;Insecure Direct Object Reference to Add yourself to any Organization&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
Whenever you land on these type of Applications, On the registration page these applications ask you to create the resource, before the organization (seen in event management, site management and documentation applications) and after that the resource is assigned to the newly created organization.&lt;br /&gt; As you may have already got the idea, that this workflow of doing things is very prone to misconfigurations and weak implementation.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This example is from my test on an Event Hosting Application, which I discovered for the third time in this category of applications (IBA)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;On the registration, the application asks the visitor to create an event before moving ahead, the visitor does it and gets the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eventId&lt;/code&gt; in response, nothing too suspicious, in the next onboarding step application asks the user to create his/her account with all the best practices implemented but in the last two steps the application asks the user to create and organization but as soon as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;orgId&lt;/code&gt; is returned in the repsponse, the application makes a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATCH&lt;/code&gt; request&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; to the backend to add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userId&lt;/code&gt; along with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eventId&lt;/code&gt; to the organization &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/api/v3/orgAdditionOperation&lt;/code&gt; with the json body&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;orgId&quot;:&quot;UUID2&quot;,
    &quot;user&quot;:{
        &quot;id&quot;:&quot;&quot;,
        &quot;eventId&quot;:Integer
        }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;the only to handle this properly is to use a flag of some sort to detect if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;orgId&lt;/code&gt; organization is newly created or the old one, which can prevent the malicous attackers from joining the already active organization, but there wasn’t such implementation.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:blue&quot;&gt;&lt;b&gt;Organization Infinite Loop&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
During the onboarding process of these applications, you get the option to select and claim a unique subdomain to access your application, the http request may look something like this&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PUT /api/v3/orgOperation
Host:
&amp;lt;headers&amp;gt;

{
    &quot;subdomain&quot;:&quot;mr23r0&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Its important to understand that, some applications only allow you to do this only one time and no way to change the sudomain aferwards but other applications allow you to change this afterwards as well.
The interesting thing is, that in the example server config, the application has used a wildcard, therefore the application should also respond to non claimable subdomains like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docs&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crm&lt;/code&gt; etc, which may cause an internal server conflict since the DNS Server&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; would have both, static application address and the main application address. to prevent this the developers implement a blocklist of subdomains that could not be claimed, and rejected if requested, But this is a bit complex to handle and people are lazy.
&lt;img src=&quot;/assets/img/assign-logic.png&quot; alt=&quot;DNS-Instance&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In my case people weren’t lazy and did a secure implementation on the &lt;em&gt;onboarding process&lt;/em&gt;, but this onboarding process is done by a visitor, so there should be two different components to handle this, first on the onboarding and the second on the organization administration settings, In my case the request from the administrative settings looked like this, and didn’t had backend verification using a blocklist.
&lt;img src=&quot;/assets/img/bad-assign-logic.png&quot; alt=&quot;DNS-Instance&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PATCH /api/v3/orgOperation/admin/UUID2
HOST : 
&amp;lt;headers&amp;gt;

{
    &quot;subdomain&quot;:&quot;mr23r0&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As soon as the new subdomain gets assigned to the organization, the previous subdomain will no longer be a valid one, and the application redirects the administrator to the new subdomain, but the new subdomain is a static site and redirects the user to the designated subdomain, creating a never ending loop. Ultimetly the browser gets &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;too many redirects&lt;/code&gt; and the organization data will no longer be accessiable.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:blue&quot;&gt;&lt;b&gt;Force Claim Organizations&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
On the same organization administrative settings request, if someone puts a subdomain which is already in use by some other organization, the application throws an error “subdomain already in use”, There’s also absense of limit on how frequently you can change the subdomain.&lt;br /&gt;
By following race condition&lt;sup id=&quot;fnref:4&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; approach, and sending a handful of unique and an already in use subdomain in a row (4 unique, 6-10 times single already in use subdomain) the application fails to handle all the requests in a short period of time and returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;500 Internal Server Error&lt;/code&gt; but assigns the subdomain to both organizations.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:blue&quot;&gt;&lt;b&gt;Claiming Other’s Access Token&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
Coming back to the application onboarding flow, resource has been created, user account has been created, &lt;em&gt;without email verification&lt;/em&gt;, as soon as the user and the organization is being linked, the API returns a temporary access token to login the user for the &lt;em&gt;first time in the organization&lt;/em&gt;, so what’s the attack? what can you leverage here, you might be asking this question by now, so read this block once more, focus on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;italic&lt;/code&gt; fonts.
I notice two things :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Without Email Verification&lt;/li&gt;
  &lt;li&gt;Login first time, in newly created organization&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the application doesn’t verifies the ownership of the email, before handing-out the access token, it’s already bad but, it can be further followed to a much higher risk.&lt;br /&gt;
Since we have this behavior in the application, We can create a new organization with the victim’s email, and get the one-time access token, following the ideal flow. Instance Based Applications, while they are internally stand as a centraliezed (sigular) application but use header like referer and orgin to seperate the different DNS instance data, so the token should have resource access assigned in some way, Ideally.
&lt;img src=&quot;/assets/img/dns-token-generation.png&quot; alt=&quot;DNS-Instance&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This can be tested, by trying to use the token on the previously created organization, the token should not allow you to access the previously created organization, since there’s no possible way to switch between the organizations using the application UI, user must login into the second instance to access it.
Ultimately, we got the access of the target instance with just by knowing an email address, funny isn’t it?&lt;/p&gt;

&lt;p&gt;As we wrap up, I want to suggest that you learn whatever interests you and get really good at it. It’s always useful in some way, and keep dreaming until you can make those dreams real. Thanks!&lt;/p&gt;

&lt;hr data-content=&quot;footnotes&quot; /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.gooddata.com/blog/multi-tenant-architecture/&quot; target=&quot;_blank&quot;&gt;Multi-tenancy&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods&quot; target=&quot;_blank&quot;&gt;Requests - HTTP Verbs&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.cloudflare.com/learning/dns/what-is-a-dns-server/&quot; target=&quot;_blank&quot;&gt;DNS Server&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.techtarget.com/searchstorage/definition/race-condition&quot; target=&quot;_blank&quot;&gt;Race Condition&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Saransh Saraf</name></author><category term="posts" /><category term="Hacking," /><category term="Penetration" /><category term="Testing," /><category term="Bug" /><category term="Bounty," /><category term="DNS" /><category term="Hacking," /><category term="Misconfigurations," /><category term="DNS" /><category term="Implementation" /><summary type="html">You may have already seen an application which provides you with a subdomain on the application domain based on your organization or team name, I call these applications, Instance Based Applications or IBA. There are many examples for these type of applications, such as Okta.com, Circle.so and github.com. mr23r0.okta.com | mr23r0.github.io</summary></entry><entry><title type="html">Four(4) tions of Penetration</title><link href="http://localhost:4000/four-4-tions-of-penetration" rel="alternate" type="text/html" title="Four(4) tions of Penetration" /><published>2024-02-02T00:00:00+05:30</published><updated>2024-02-02T00:00:00+05:30</updated><id>http://localhost:4000/four-4-tions-of-penetration</id><content type="html" xml:base="http://localhost:4000/four-4-tions-of-penetration">&lt;h3 id=&quot;index&quot;&gt;Index&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#selection&quot;&gt;Selection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#detection&quot;&gt;Detection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#relation&quot;&gt;Relation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction&quot;&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After my last extensive vulnerability test&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, I got the taste of site management applications and had a craving to do more of similar kinds. This post will elaborate the target selection, a series of tests and the way I managed to make a good working relationship with the company.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The site management applications I choose typically include the capability of creating and managing multiple sites in one account and also supports team management.&lt;/p&gt;

&lt;h3 id=&quot;selection&quot;&gt;&lt;a href=&quot;#selection&quot;&gt;Selection&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I invested about 8-9 days after which I realised that Google Dorks&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; are not the best way of finding similar products and applications, then I remembered about &lt;a href=&quot;https://crunchbase.com&quot; target=&quot;_blank&quot;&gt;Crunchbase&lt;/a&gt; and how helpful it is in finding similar products and applications.&lt;br /&gt;
I made a list of 12 similar applications and started looking in the archive logs&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; for these applications.&lt;/p&gt;

&lt;p&gt;During the detection process, I found the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;email&lt;/code&gt; query parameter in the unsubscribe path and after testing I found that I can change the user email preferences without proper authentication and authorization, therefore I assumed that there is a high possibility of more bugs in the application and I contacted the CTO of the company.&lt;/p&gt;

&lt;h3 id=&quot;detection&quot;&gt;&lt;a href=&quot;#detection&quot;&gt;Detection&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As soon as I got a green flag from the CTO, I initiated my tests with creating two accounts in the same team.&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;broken-access-control&quot;&gt;Broken Access Control&lt;/h4&gt;
&lt;p&gt;After checking small amount of things on the application, I shifted my focus to break the &lt;a href=&quot;https://www.cloudflare.com/learning/cloud/what-is-multitenancy&quot; target=&quot;_blank&quot;&gt;Multitenancy&lt;/a&gt; of the application, therefore I deleted one account from the same team while the user was loggedin. I quickly realised that the user’s access and the session is not revoked, and the removed user still has all the administrator privileges.&lt;/p&gt;

&lt;h4 id=&quot;magic-link-reverse-engineering&quot;&gt;Magic Link Reverse Engineering&lt;/h4&gt;
&lt;p&gt;After creating an account for the previously removed user, the first time login magic link caught my attention &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;instance&amp;gt;.censored.com/editor/login?password_set=y&amp;amp;account=true&amp;amp;a=&amp;lt;victim&apos;s username&amp;gt;&lt;/code&gt;&lt;br /&gt;
 So I checked my first account and solved the puzzle of all the query parameters and using the crafted link, I was able to get into the first account without authentication.&lt;/p&gt;

&lt;h4 id=&quot;account-takeover&quot;&gt;Account Takeover&lt;/h4&gt;
&lt;p&gt;Magic link reverse engineering filled me with a sense of amazement.
 Then I started an extensive test on the registration process, while creating the third account, I noticed a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt; request&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /signupajax-v3 HTTP/1.1
Host: censored.com
Connection: close
Content-Length: 359
sec-ch-ua: &quot;Not_A Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;120&quot;, &quot;Google Chrome&quot;;v=&quot;120&quot;
Accept: */*
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
X-Requested-With: XMLHttpRequest
sec-ch-ua-mobile: ?0
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36
sec-ch-ua-platform: &quot;Linux&quot;
Origin: https://censored.com
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: cors
Sec-Fetch-Dest: empty
Referer: https://censored.com/signup
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Cookie: &amp;lt;cookies&amp;gt;

siteName=myThirdAccountSite&amp;amp;siteUrl=myThirdAccountSite&amp;amp;evstart=&amp;amp;adminEmail=root@mr23r0.rocks&amp;amp;duplicate=false&amp;amp;hash=&amp;lt;hash&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I changed the email to the first account email, received a magic link in response, by using the magic link I was able to get into the first account, not only this I was also able to navigate between account sites and make changes.&lt;/p&gt;

&lt;h3 id=&quot;relation&quot;&gt;&lt;a href=&quot;#relation&quot;&gt;Relation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When I initially contacted the CTO of the company, although he gave me a green flag but specifically mentioned that he has a tight budget and won’t be able to provide reward (bounty), but when I submitted the report he appreciated my work and squeezed the company’s budget a bit to show their gratitude.&lt;/p&gt;

&lt;hr data-content=&quot;footnotes&quot; /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://mr23r0.github.io/code-flaws-part-1.html&quot; target=&quot;_blank&quot;&gt;Code flaws leads to Organization Account Takeover&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://book.hacktricks.xyz/generic-methodologies-and-resources/external-recon-methodology/github-leaked-secrets&quot; target=&quot;_blank&quot;&gt;Google Dorks&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://mr23r0.github.io/uncovering-the-secrets-part-1.html&quot; target=&quot;_blank&quot;&gt;The Potential of Web archive in bug bounty programs&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Saransh Saraf</name></author><category term="posts" /><summary type="html">Index Introduction Selection Detection Relation</summary></entry><entry><title type="html">Defying Paywalls in the Pursuit of Knowledge, Just as Dad Envisioned</title><link href="http://localhost:4000/read-anything" rel="alternate" type="text/html" title="Defying Paywalls in the Pursuit of Knowledge, Just as Dad Envisioned" /><published>2024-01-31T00:00:00+05:30</published><updated>2024-01-31T00:00:00+05:30</updated><id>http://localhost:4000/read-anything</id><content type="html" xml:base="http://localhost:4000/read-anything">&lt;h3 id=&quot;index&quot;&gt;Index&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#user-interface&quot;&gt;User Interface&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#under-the-hood&quot;&gt;Under The Hood&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction&quot;&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;In my pursuit of knowledge within a digital audiobook and PDF service, I uncovered a noteworthy security vulnerability that facilitated unrestricted access to all content, including unpublished manuscripts, without the need for a subscription. &lt;br /&gt;
This exploration stemmed from the belief instilled by my father, emphasizing the inherent freedom of knowledge in contrast to the prevailing model that demanded substantial financial investments for each literary endeavor.&lt;/p&gt;

&lt;h3 id=&quot;user-interface&quot;&gt;&lt;a href=&quot;#user-interface&quot;&gt;User Interface&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As a regular user navigating the platform, my initial attempts to access content without a subscription through the user interface proved unfruitful.&lt;br /&gt;
Serendipitously, I stumbled upon the authors’ subdomain—a space dedicated to writing and publishing. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://community.censored.com&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;
However, despite this discovery, the conventional interface lacked a straightforward method to access the literary works of others without financial obligations, indicating a critical gap in user accessibility.&lt;/p&gt;

&lt;h3 id=&quot;under-the-hood&quot;&gt;&lt;a href=&quot;#under-the-hood&quot;&gt;Under The Hood&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Transitioning into a more technical exploration, I meticulously scrutinized the functionality of the authors’ subdomain. Through the monitoring of network requests, a fascinating revelation emerged: the submission of a book for review triggered a browser request to open the submitted book.&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /api/v1/spark/novels/{Integer_IDs}/
Host: community.censored.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Seizing this opportunity, I exploited the system by modifying the numerical book IDs in the requests. Given that the book IDs were numerical, I successfully engaged in a brute force attack, systematically testing and accessing different IDs. This not only granted unauthorized access to my own submissions but also to the works of fellow authors, spotlighting a critical security vulnerability in the nuanced interplay between the author’s submission process and the underlying review infrastructure.&lt;/p&gt;</content><author><name>Saransh Saraf</name></author><category term="posts" /><summary type="html">Index Introduction User Interface Under The Hood</summary></entry><entry><title type="html">01 HTML Injection | Web 101</title><link href="http://localhost:4000/html-injection-guide" rel="alternate" type="text/html" title="01 HTML Injection | Web 101" /><published>2023-12-30T00:00:00+05:30</published><updated>2023-12-30T00:00:00+05:30</updated><id>http://localhost:4000/html-injection-guide</id><content type="html" xml:base="http://localhost:4000/html-injection-guide">&lt;h3 id=&quot;index&quot;&gt;Index&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#html&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#weaponize&quot;&gt;Weaponize&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#detection&quot;&gt;Detection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#bypass&quot;&gt;Bypass&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rw-examples&quot;&gt;RW Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction&quot;&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In the realm of web security, understanding vulnerabilities is crucial. HTML Injection stands as a pivotal point in this landscape, representing a vulnerability that can compromise the integrity of web applications.
This technique, while seeming innocuous at first glance, poses a significant threat by allowing attackers to manipulate a webpage’s content, structure, or functionality. For web testers and security professionals, comprehending HTML Injection is paramount. It serves as a means to evaluate and fortify web applications, ensuring they are robust enough to withstand such attacks.&lt;/p&gt;

&lt;h3 id=&quot;html&quot;&gt;&lt;a href=&quot;#html&quot;&gt;HTML&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;HTML, or Hypertext Markup Language, is the standard language used to create web pages. HTML is composed of various elements and tags that define the structure of a web page.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;My Web Page&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

    &amp;lt;h1&amp;gt;Welcome to My Page!&amp;lt;/h1&amp;gt;
    
    &amp;lt;p&amp;gt;This is a paragraph of text.&amp;lt;/p&amp;gt;
    
    &amp;lt;img src=&quot;https://images.theconversation.com/files/450362/original/file-20220307-121610-zfik1f.jpeg&quot; alt=&quot;A beautiful image&quot;&amp;gt;
    
    &amp;lt;a href=&quot;https://en.wikipedia.org/wiki/Dead_Poets_Society&quot;&amp;gt;Visit Dead Poets Socity&amp;lt;/a&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This basic HTML structure creates a webpage:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt; declares the document type and version of HTML being used (in this case, HTML5).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;html&amp;gt;&lt;/code&gt; encapsulates the entire content of the web page.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; contains meta-information about the document, such as the page title, character set, etc.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;title&amp;gt;&lt;/code&gt; sets the title of the webpage, which appears in the browser’s title bar or tab.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; contains the visible content of the webpage.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; is a heading tag used to create the main header.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; creates a paragraph of text.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;img&amp;gt;&lt;/code&gt; inserts an image with the specified source (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt;) and alternative text (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alt&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt; creates a hyperlink to another webpage specified in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;href&lt;/code&gt; attribute.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This HTML code, when rendered in a web browser, would display a simple webpage with a heading, a paragraph of text, an image, and a hyperlink.&lt;/p&gt;

&lt;h3 id=&quot;weaponize&quot;&gt;&lt;a href=&quot;#weaponize&quot;&gt;Weaponize&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Imagine HTML tags as building blocks that structure a webpage. Now, when one tag is placed inside another, it’s like nesting these building blocks. This nesting can lead to unintended consequences if not handled properly.&lt;/p&gt;

&lt;p&gt;For instance, if a website allows users to input text that gets displayed on the page, and this input isn’t properly sanitized (meaning, it’s not checked for harmful code), a user might enter HTML tags within their input.&lt;/p&gt;

&lt;p&gt;Let’s say a user innocently types something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;b&amp;gt;Hello&amp;lt;/b&amp;gt;&lt;/code&gt; in a comment section where bold text is not allowed through rich text editor. If the website doesn’t filter or neutralize these tags, the entire content following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;b&amp;gt;&lt;/code&gt; will become bold until it reaches &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;/b&amp;gt;&lt;/code&gt;. This is harmless in most cases and is called HTML injection, but it becomes a problem when malicious users deliberately input code that can harm the website or its visitors.&lt;/p&gt;

&lt;p&gt;For instance, an attacker might input JavaScript code within HTML tags. When other users view this comment, their browsers might execute this JavaScript, potentially performing actions like redirecting to malicious sites, stealing session cookies, or displaying unwanted content—things the website’s creators never intended.&lt;/p&gt;

&lt;p&gt;So, the crux here is that allowing unfiltered HTML tags within other HTML tags on a website’s client side (what users see and interact with) can open the door to unexpected and harmful actions if not properly managed or sanitized. It’s like allowing someone to rearrange the building blocks in a tower—while most rearrangements might be harmless, some configurations could make the tower unstable or even collapse.&lt;/p&gt;

&lt;h3 id=&quot;detection&quot;&gt;&lt;a href=&quot;#detection&quot;&gt;Detection&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Imagine you’re a web tester examining a site with input fields—like a search bar or a comment section. Your goal isn’t to break things but to find weaknesses that could allow someone with ill intentions to harm the website or its users.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Testing Input Fields:
 You start by typing harmless text into these fields to ensure they work properly. Then, you get crafty. Instead of regular words, you enter something sneaky: HTML tags or code snippets. For example, you might try typing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;alert(&quot;Test!&quot;)&amp;lt;/script&amp;gt;&lt;/code&gt; instead of plain text.&lt;/li&gt;
  &lt;li&gt;Playing with Scripts:
 When you hit enter, if a pop-up saying “Test!” appears, you’ve found a vulnerability. This is like discovering a secret passage in a castle by trying different keys in various doors.&lt;/li&gt;
  &lt;li&gt;Sneaky Cross-Site Scripting:
 Now, imagine you can make the website run a script that steals information or alters its content. By entering special code into an innocent-looking comment, you might make it so that when others view it, their browsers unknowingly run harmful scripts.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Manipulating HTML:
 Sometimes, you try changing things like an image’s address or link tags to point somewhere unexpected. It’s like pretending to be a magician and making things on the webpage disappear or go to the wrong places.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Crafty URL Tweaking: 
 Changing the website’s address slightly in the browser’s address bar might reveal hidden weaknesses. It’s akin to altering a treasure map to find hidden paths.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In essence, by playing around with HTML tags and injecting code in various parts of the website, you’re like a detective searching for clues. Your goal is to uncover these weaknesses before anyone with harmful intentions does, helping the website’s creators strengthen their defenses against potential attacks.&lt;/p&gt;

&lt;h3 id=&quot;bypass&quot;&gt;&lt;a href=&quot;#bypass&quot;&gt;Bypass&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Developers implement validators and escape mechanisms to protect websites from malicious input. However, attackers often craft specialized payloads to slip through these defenses. These crafted payloads are designed to bypass validators and encoding systems, enabling the injection of harmful HTML code.&lt;/p&gt;

&lt;p&gt;These bypass techniques involve manipulating input fields by inserting deceptive HTML tags or using encoded representations of tags. For instance,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Understanding Input Validation:
 Websites often have forms or input fields where users can submit information. Input validation is the process of checking this information to ensure it’s safe before displaying or processing it. If the validation process is weak or nonexistent, attackers can exploit this vulnerability.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bypassing Filters:
 Attackers attempt to bypass input filters or validation mechanisms by entering specially crafted strings that evade detection. They might use variations or combinations of HTML tags, special characters, or encoded representations of tags to confuse the validation process.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Encoding Techniques:
 Attackers might use encoding techniques like URL encoding (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%3Cscript%3E&lt;/code&gt;) or character encoding (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;lt;script&amp;amp;gt;&lt;/code&gt;) to disguise HTML tags and bypass filters that are looking for specific patterns of code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Context-Specific Attacks:
 Injection attacks can be context-specific. For instance, if a website allows certain HTML tags in comments but not in usernames, an attacker might try injecting malicious code in the allowed comment section to later affect other parts of the website where HTML injections are not expected.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Polyglot Injection:
 This technique involves crafting a string that is both valid in HTML and JavaScript. It aims to bypass filters that are focused on HTML while still executing JavaScript code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Whitespace Manipulation:
 Injecting code with spaces or newline characters can sometimes confuse filters, allowing malicious code to slip through undetected.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rw-examples&quot;&gt;&lt;a href=&quot;#rw-examples&quot;&gt;RW Examples&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hackerone.com/reports/181810&quot; target=&quot;_blank&quot;&gt;Hackerone&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hackerone.com/reports/1581499&quot; target=&quot;_blank&quot;&gt;Hackerone&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hackerone.com/reports/1537149&quot; target=&quot;_blank&quot;&gt;Hackerone&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hackerone.com/reports/381553&quot; target=&quot;_blank&quot;&gt;Hackerone - Personal Favourite&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hackerone.com/reports/150179&quot; target=&quot;_blank&quot;&gt;Hackerone - Personal Favourite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Saransh Saraf</name></author><category term="guides" /><summary type="html">Index Introduction HTML Weaponize Detection Bypass RW Examples</summary></entry><entry><title type="html">Podcast 01</title><link href="http://localhost:4000/podcast-01" rel="alternate" type="text/html" title="Podcast 01" /><published>2023-12-25T00:00:00+05:30</published><updated>2023-12-25T00:00:00+05:30</updated><id>http://localhost:4000/podcast-01</id><content type="html" xml:base="http://localhost:4000/podcast-01">&lt;iframe width=&quot;98%&quot; height=&quot;300&quot; class=&quot;ioda&quot; style=&quot;filter:invert(100%)&quot; src=&quot;https://www.youtube.com/embed/jokYRytaHX4&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot;&gt;&lt;/iframe&gt;</content><author><name>Saransh Saraf</name></author><category term="featured" /><summary type="html"></summary></entry><entry><title type="html">Unlocking the Power of Observation : the front door key 🔑</title><link href="http://localhost:4000/unlocking-the-power-of-observation-part-2" rel="alternate" type="text/html" title="Unlocking the Power of Observation : the front door key 🔑" /><published>2023-09-16T00:00:00+05:30</published><updated>2023-09-16T00:00:00+05:30</updated><id>http://localhost:4000/unlocking-the-power-of-observation-part-2</id><content type="html" xml:base="http://localhost:4000/unlocking-the-power-of-observation-part-2">&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/v2/resize:fit:720/format:webp/1*sLr3oSvwjgfx_6N-Mzgv0g.png&quot; alt=&quot;banner&quot; class=&quot;iod&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We are currently in the era of SaaS applications and startups. SaaS applications have become ubiquitous, serving various purposes, from sending notifications to collecting feedback. There seems to be a SaaS application for virtually every need, and startups are capitalizing on this trend.&lt;/p&gt;

&lt;p&gt;For those familiar with &lt;em&gt;web applications&lt;/em&gt;&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, the concept is quite clear: applications require users to create accounts to establish user identities and workspaces. Within these workspaces, users can perform tasks and store their relevant information.&lt;/p&gt;

&lt;p&gt;The development and maintenance of user registrations and session management can be quite challenging in terms of security. Therefore, it’s not surprising that SaaS services offer user management features that can be easily integrated with just a few clicks. Startups often opt for these solutions as their primary choice. This allows them to allocate their resources and funds toward developing their core solutions, rather than diverting them to the complexities of user management.&lt;/p&gt;

&lt;p&gt;I noticed a similar situation during a &lt;em&gt;penetration test&lt;/em&gt;&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; conducted on “company.com.” It’s worth noting that “company.com” serves as an alias for the actual application that will be the focus of discussion throughout this article.&lt;/p&gt;

&lt;p&gt;While examining the login page, I recognized that it was associated with a SaaS service providing user management features. To gain deeper insights, I routed every request through Burp Suite, with the assumption that I might discover something valuable about the service.&lt;/p&gt;

&lt;p&gt;Following several registration processes and login-logout interactions, I decided to inspect the requests within Burp Proxy and the Target tab. To my surprise, I noticed that certain domains and subdomains were making calls to the SaaS application. Given that such calls are typically intended to be executed on the server side, this observation raised suspicions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/v2/resize:fit:720/format:webp/1*fDKgDM19nqs1NYWrNlbyDg.jpeg&quot; alt=&quot;image&quot; class=&quot;iod&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Among the various calls, two in particular from api.saasapp.com caught my attention. Upon closer examination, I discovered that the response from the POST request included an &lt;em&gt;OAuth token&lt;/em&gt;&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, with the request containing both a client ID and a secret.&lt;/p&gt;

&lt;p&gt;For those who may not be familiar, it’s essential to understand that virtually every SaaS application offering technical and non-technical services provides APIs for programmatic usage. As I delved into the SaaS application’s documentation, I learned that the key and secret serve the purpose of connecting the customer application (company.com) with the SaaS application (saasapp.com), facilitating the sharing of user identities and session tokens.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/v2/resize:fit:720/format:webp/1*d0iAUVZ-8GFNEO7HZcKlrg.jpeg&quot; alt=&quot;image&quot; class=&quot;iod&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Upon further exploration of the keys, I found that they possess administrative privileges. Using the generated token associated with these keys, I gained the ability to retrieve user data, make modifications to their information, and even add members with administrative control over the SaaS application account for the application (company.com).&lt;/p&gt;

&lt;p&gt;It granted me Administrator access to the &lt;em&gt;User Management System&lt;/em&gt;&lt;sup id=&quot;fnref:4&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;, highlighting yet another instance of how expanding the attack surface and meticulously scrutinizing details can uncover creative yet crucial vulnerabilities. I often refer to this approach as “Unlocking the Power of Observation.” This marks the second article in this series.&lt;/p&gt;

&lt;p&gt;Before concluding, I would like you to consider this scenario: What if I were unaware of these SaaS applications or the current trends in the development landscape? I might have dismissed it as a “rabbit hole.” Therefore, I encourage you not to limit your learning. Embrace the opportunity to learn about a wide range of topics because knowledge is an asset that never goes to waste — except perhaps for those intricate mathematical calculations we encountered in school ;)&lt;/p&gt;

&lt;p&gt;This concludes my discussion on this topic. I hope you’ve gained new insights from this.&lt;br /&gt;
Thank you!&lt;/p&gt;

&lt;hr data-content=&quot;footnotes&quot; /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/what-is/web-application/#:~:text=A%20web%20application%20is%20software,with%20customers%20conveniently%20and%20securely.&quot; target=&quot;_blank&quot;&gt;Web Applications&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.synopsys.com/glossary/what-is-penetration-testing.html&quot; target=&quot;_blank&quot;&gt;Penetration Testing/Tests&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc6749&quot; target=&quot;_blank&quot;&gt;OAuth Tokens&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.egnyte.com/guides/governance/user-management#:~:text=User%20management%20is%20a%20system,Providing%20users%20with%20authenticated%20access&quot; target=&quot;_blank&quot;&gt;User Management System&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Saransh Saraf</name></author><category term="posts" /><summary type="html"></summary></entry><entry><title type="html">Uncovering the Secrets : The Potential of Web Archive in Bug Bounty Programs</title><link href="http://localhost:4000/uncovering-the-secrets-part-1" rel="alternate" type="text/html" title="Uncovering the Secrets : The Potential of Web Archive in Bug Bounty Programs" /><published>2023-06-08T00:00:00+05:30</published><updated>2023-06-08T00:00:00+05:30</updated><id>http://localhost:4000/uncovering-the-secrets-part-1</id><content type="html" xml:base="http://localhost:4000/uncovering-the-secrets-part-1">&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/v2/resize:fit:1100/format:webp/1*7tGxwHgIUzHlLJqIgWXAJA.png&quot; alt=&quot;banner&quot; class=&quot;iod&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-infamous-wayback-machine&quot;&gt;The Infamous WayBack Machine&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;“According to ChatGPT, The Wayback Machine is a digital archive of the World Wide Web, maintained by the Internet Archive. It is a valuable tool that allows users to access and browse archived versions of websites as they appeared at different points in time. The Wayback Machine captures and stores snapshots of web pages, creating a historical record of the internet.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The WayBack Machine was initially designed with the intention of serving a noble purpose by preserving valuable knowledge and information from web pages that have been removed or deleted. However, as it fulfills this objective, the WayBack Machine also records and retains the URLs and any sensitive information mentioned within those URLs.&lt;/p&gt;

&lt;h3 id=&quot;unraveling-vulnerabilities-wide-open&quot;&gt;Unraveling Vulnerabilities Wide Open&lt;/h3&gt;
&lt;p&gt;Although the WayBack Machine logs various aspects for its intended purpose, it also inadvertently captures vulnerabilities present in applications and sensitive information that was never intended to be made public. These may include confidential details like discount coupons, various types of tokens, hidden &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt; or query parameters, and similar information.&lt;/p&gt;

&lt;p&gt;If utilized correctly, these seemingly minor details can potentially lead bug bounty hunters to discover critical and groundbreaking vulnerabilities.&lt;/p&gt;

&lt;p&gt;To gain a better understanding, let’s examine a few examples I have come across within the past six months:&lt;/p&gt;

&lt;h3 id=&quot;password-leakage&quot;&gt;Password leakage&lt;/h3&gt;
&lt;p&gt;As we are aware, in approximately one out of every three SaaS applications or service provider applications, APIs are implemented to facilitate programmatic access to their data, In order to grant access to the appropriate resources, these applications typically require an &lt;em&gt;authentication and authorization flow&lt;/em&gt;&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. While many applications offer login options with Google or OAuth, some still rely on their own password authentication or API tokens/keys. Typically, these credentials are passed as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt; parameters. However, in the case of secret.app, they were transmitted as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt; or query parameters. Furthermore, this particular application demanded both a username and password for authentication alongside OAuth.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/oauth/v2/token?client_id=&amp;lt;ID&amp;gt;&amp;amp;client_secret=&amp;lt;secret&amp;gt;&amp;amp;grant_type=password&amp;amp;scope=user&amp;amp;username=community@victim.com&amp;amp;password=&amp;lt;password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Evidences from API Documentation&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl --location &apos;https://api.secret.app/oauth/v2/token&apos; \
--form &apos;client_id=&quot;&quot;&apos; \
--form &apos;client_secret=&quot;&quot;&apos; \
--form &apos;grant_type=&quot;password&quot;&apos; \
--form &apos;scope=&quot;user&quot;&apos; \
--form &apos;username=&quot;&quot;&apos; \
--form &apos;password=&quot;&quot;&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;During the OAuth or authentication process, the username and password were provided through query parameters, and these details were captured and recorded by the WayBack Machine.&lt;/p&gt;

&lt;h3 id=&quot;authentication-bypass-detection&quot;&gt;Authentication Bypass Detection&lt;/h3&gt;
&lt;p&gt;In this particular scenario, the vulnerable application is commonly susceptible to &lt;em&gt;CVE-2023–0328&lt;/em&gt;&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; or a similar vulnerability. In simpler terms, this vulnerability enables an attacker to gain access to unauthorized resources by exploiting a lack of capability checks and handling of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Authorization&lt;/code&gt; header.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://api.secret.app/account/xxxx/members?members[fields][]=firstName&amp;amp;member_data[fields][]=lastName&amp;amp;membet_data[fields][]=organizationName&amp;amp;sid=xxxxxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By visiting the links that have been logged on archive.org (WayBack / WebArchive), it is possible to identify and detect this vulnerability.&lt;/p&gt;

&lt;h3 id=&quot;user-personal-information-leakage&quot;&gt;User Personal Information Leakage&lt;/h3&gt;
&lt;p&gt;This particular issue is commonly observed in applications that utilize &lt;em&gt;Shopify&lt;/em&gt;&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; to create an online store for selling products. In such cases, the checkout and orders URL paths are often not adequately secured or configured to require authentication. As a consequence, when an actor visits the links stored in archive.org, they gain unauthorized access to the user’s personal information, including the billing details. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://shop.secret.app/xxxxx/orders/&amp;lt;SSID&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;unauthorized-access-to-user-preferences&quot;&gt;Unauthorized Access to User Preferences&lt;/h3&gt;
&lt;p&gt;This issue arises when an application fails to enforce authentication through request headers or cookies, thereby granting access to any actor who possesses the preference link containing the user ID or token. In my case, the application did not require cookie or header authentication, enabling the actor to modify user preferences solely by accessing a specially crafted URL, which was logged in archive.org. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://pref.secret.app/unsubscribe?unsubscribe=1&amp;amp;uid=&amp;lt;UUID&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;key-points&quot;&gt;Key Points&lt;/h3&gt;
&lt;p&gt;As demonstrated by the examples provided above, the targeted application can be susceptible to various vulnerabilities. It is crucial to comprehend the underlying logic behind any functionality that an application allows. The vulnerabilities illustrated are not exhaustive, and with the help of the WayBack Machine, bug bounty hunters can uncover numerous intriguing vulnerabilities such as Cross-Site Scripting (XSS), Insecure Direct Object Reference (IDOR), and Remote Code Execution (RCE).&lt;/p&gt;

&lt;h3 id=&quot;easy-hunt&quot;&gt;Easy Hunt&lt;/h3&gt;
&lt;p&gt;While a significant number of individuals depend on the command line interface to retrieve information and access logged URLs from the WayBack Machine, here is an alternative method available for obtaining the same data through a web browser interface.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://web.archive.org/cdx/search/cdx?url=*.secret.app/*&amp;amp;output=text&amp;amp;fl=original&amp;amp;collapse=urlkey
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;
&lt;p&gt;While the recommended approach is to identify and address each vulnerability individually, organizations can opt for a simple fix by utilizing a specific entry in their robots.txt file to prevent or block the WayBack Machine from crawling their applications.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;User-agent: la_archiver
Disallow: /
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To gain further insight into the solution, I recommend reading an excellent article on the topic available at &lt;em&gt;reputationx.com&lt;/em&gt;&lt;sup id=&quot;fnref:4&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;I hope you have found this post informative and learnt something new from it.&lt;br /&gt;
Thanks!&lt;/p&gt;

&lt;hr data-content=&quot;footnotes&quot; /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc6749&quot; target=&quot;_blank&quot;&gt;Authentication and Authorization flow&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.cve.org/CVERecord?id=CVE-2023-0328&quot; target=&quot;_blank&quot;&gt;CVE-2023–0328&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.shopify.com/&quot; target=&quot;_blank&quot;&gt;Shopify&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://blog.reputationx.com/block-wayback-machine&quot; target=&quot;_blank&quot;&gt;reputationx.com&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Saransh Saraf</name></author><category term="posts" /><summary type="html"></summary></entry><entry><title type="html">Unlocking the Power of Observation: How Experienced Hackers Stand Out in a Sea of Amateurs</title><link href="http://localhost:4000/unlocking-the-power-of-observation-part-1" rel="alternate" type="text/html" title="Unlocking the Power of Observation: How Experienced Hackers Stand Out in a Sea of Amateurs" /><published>2023-02-12T00:00:00+05:30</published><updated>2023-02-12T00:00:00+05:30</updated><id>http://localhost:4000/unlocking-the-power-of-observation-part-1</id><content type="html" xml:base="http://localhost:4000/unlocking-the-power-of-observation-part-1">&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/v2/resize:fit:720/format:webp/1*CSzOXZh3oguY5uNaFETg0g.jpeg&quot; alt=&quot;banner&quot; class=&quot;iod&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hackers need to embrace their superpower in order to become more efficient and meaningful, while doing bug bounty they have to search for weaknesses and also make sure that with their actions the application doesn’t crash.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/v2/resize:fit:720/format:webp/1*7TL7yeUfzC8zLRgDtJcyXA.jpeg&quot; alt=&quot;image&quot; class=&quot;iod&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the interest of time, let’s talk about one feature I saw in the middle of last year.&lt;/p&gt;

&lt;h3 id=&quot;functionality&quot;&gt;Functionality&lt;/h3&gt;
&lt;p&gt;This functionality gives users the ability to claim a subdomain on the application (website) to create a workspace and work directly on that subdomain. (In simple words, the application allows users to create instances)&lt;/p&gt;

&lt;h3 id=&quot;attack-i--account-takeover&quot;&gt;Attack (i) : Account Takeover&lt;/h3&gt;
&lt;p&gt;I’ve already touched on this, so I suggest you read my previous &lt;em&gt;article&lt;/em&gt;&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. I assume you read this article, so let’s continue.&lt;/p&gt;

&lt;h3 id=&quot;attack-ii--account-takeover&quot;&gt;Attack (ii) : Account Takeover&lt;/h3&gt;
&lt;p&gt;Application Flow : When a user tries to sign-up, the application doesn’t requires user to verify the email first and after completing the sign-up process successfully the user gets a “login token” and with the help of this “login token” user can login into his/her account without the password.&lt;br /&gt;
&lt;em&gt;Note: This token is “One Time Token”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is the same application as &lt;em&gt;the Attack (i)&lt;/em&gt; so again, I created a new subdomain and on the claim subdomain request I replaced my email with the victim’s email and as I don’t know the password of the victim’s email I added “anything” in the password field.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;methodName&quot;: &quot;onboard&quot;,
  &quot;params&quot;: {
    &quot;some_params&quot;: {
      &quot;some_name&quot;: &quot;anything&quot;,
      &quot;some_modules&quot;: [
        1
      ]
    },
    &quot;user_params&quot;: {
      &quot;name&quot;: &quot;CanBeAnything&quot;,
      &quot;email&quot;: &quot;hunterzerocipher@gmail.com&quot;,
      &quot;password&quot;: &quot;Anything&quot;
    },
    &quot;community_params&quot;: {
      &quot;name&quot;: &quot;anything&quot;,
      &quot;slug&quot;: &quot;anything&quot;,
      &quot;c_id&quot;: 715,
      &quot;client_time_zone&quot;: &quot;Asia/Calcutta&quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the response I got the “login token” and made a browser GET request on the victim’s subdomain with the “login token” and I was logged-in in the victim’s account.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://victim.application.com/admin/login?login_token=xxxxxxxxxxx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this example what happened is the application doesn’t actually generate the login token with multiple details of the user, it only used the email to generate the login token and as the login token only contains a pass to login as the user without checking the subdomain or the organization, allowing attacker to create login pass with the victim email.&lt;/p&gt;

&lt;h3 id=&quot;attack-iii--system-conflict&quot;&gt;Attack (iii) : System Conflict&lt;/h3&gt;
&lt;p&gt;I have to say this example is a bit funny ;)&lt;/p&gt;

&lt;p&gt;As the previous example I was trying to create a subdomain in the application and the url was &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://portal.application.com/register&lt;/code&gt; and while login I noticed that the url is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://login.application.com/admin/login&lt;/code&gt;
So I again tried to create a subdomain “xzcvb” and Intercepted the request in &lt;em&gt;Burp Suite&lt;/em&gt;&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; changed the subdomain name to “login” and sent the request and as a surprise I got “200 OK”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/v2/resize:fit:640/format:webp/1*XzlnW_sVtRflEd_je697Iw.png&quot; alt=&quot;image&quot; class=&quot;iod&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What’s the Impact? Due to some reason &lt;em&gt;(Well I think it happened because the application’s module which was responsible to create subdomains had over privileges)&lt;/em&gt; when a user tries to visit login.application.com or tries to recreate his/her session the application gets confused “where to take the user” making the subdomain not reachable ultimately making the application not reachable.&lt;/p&gt;

&lt;p data-content=&quot;footnotes&quot;&gt;I hope it gave you a clear idea how efficient bug bounty and penetration testing becomes when you use your superpowers rather than relaying on the automation and third party tools.
I hope you’ve learnt something new with this.&lt;br /&gt;
Thank You!
—&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;/code-flaws-part-1&quot; target=&quot;_blank&quot;&gt;Previous Article&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://portswigger.net/burp&quot; target=&quot;_blank&quot;&gt;Burp Suite&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Saransh Saraf</name></author><category term="posts" /><summary type="html"></summary></entry><entry><title type="html">Code flaws leads to Organization Account Takeover</title><link href="http://localhost:4000/code-flaws-part-1" rel="alternate" type="text/html" title="Code flaws leads to Organization Account Takeover" /><published>2022-10-13T00:00:00+05:30</published><updated>2022-10-13T00:00:00+05:30</updated><id>http://localhost:4000/code-flaws-part-1</id><content type="html" xml:base="http://localhost:4000/code-flaws-part-1">&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/v2/resize:fit:720/format:webp/1*TXPw0GXprB2NHBoW4-EvYA.png&quot; alt=&quot;banner&quot; class=&quot;iod&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-application-design&quot;&gt;the Application Design&lt;/h3&gt;
&lt;p&gt;The Application was only allowing one Admin/Manager per one organization, but other viewers has to login in order to view the content.&lt;br /&gt;
&lt;em&gt;Note: After creating an account user cannot change the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;organization_name&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;design-flaw-insecure-design&quot;&gt;Design Flaw/ Insecure Design&lt;/h3&gt;
&lt;p&gt;While creating an account I saw a very weird parameter in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt; request&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /some_ajax/create_event_flow HTTP/1.1
Host: portal.example.com
Connection: close
Content-Length: 663
sec-ch-ua: &quot;Google Chrome&quot;;v=&quot;105&quot;, &quot;Not)A;Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;105&quot;
Accept: application/json, text/javascript, */*; q=0.01
Content-Type: application/json; charset=UTF-8
X-Requested-With: XMLHttpRequest
sec-ch-ua-mobile: ?0
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36
sec-ch-ua-platform: &quot;Linux&quot;
Origin: https://portal.example.com
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: cors
Se;c-Fetch-Dest: empty
Referer: https://portal.example.com/create_event_flow
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Cookie:
{&quot;methodName&quot;:&quot;onboard&quot;,&quot;params&quot;:{&quot;some_params&quot;:{&quot;some_name&quot;:&quot;Account takeover&quot;,&quot;some_modules&quot;:[1]},&quot;user_params&quot;:{&quot;name&quot;:&quot;User_name&quot;,&quot;email&quot;:&quot;admin@mr23r0.rocks&quot;,&quot;password&quot;:&quot;Password_Secret&quot;},&quot;community_params&quot;:{&quot;name&quot;:&quot;Organization_name&quot;,&quot;slug&quot;:&quot;testthing-for-ato&quot;,&quot;c_id&quot;:683,&quot;client_time_zone&quot;:&quot;Asia/Calcutta&quot;}}}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c_id&lt;/code&gt; noticed it? I hope so, let’s see what is happening in the backend, While trying to register, the application creates a entry with the email address and creates a row in the organization table (if it’s SQL) then our current request goes into the users table and makes a user with a predefined organization.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;INSERT INTO users (username, password, organization) VALUES (&quot;Jack&quot;,&quot;123&quot;, &quot;organization_name&quot;) WHERE c_id=&apos;683&apos;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So I changed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c_id&lt;/code&gt; with the victim’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c_id&lt;/code&gt; and as expected it took me to the victim’s organization. So we got our first bug ;) Design flaw but we can also call it &lt;em&gt;Horizontal Privilege Escalation&lt;/em&gt;&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;br /&gt;
&lt;em&gt;Note : The Application doesn’t supports multiple Admin/Manager in one organization.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When I do testing, primarily what I want to achieve is an Account takeover and testing is like a video game for me completing every level one by one… so I started looking for more vulnerabilities, after 15 minutes of search I got it, found a &lt;em&gt;Stored Cross Site Scripting&lt;/em&gt;&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Organization_name&lt;/code&gt; now the problem is how can I change the victim’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Organization_name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I tried to replicate the create an account request and BOOM!! we can send a POST request to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/some_ajax/create_event_flow&lt;/code&gt; no authentication required and also if we put cross site scripting payload in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Organization_name&lt;/code&gt; and change our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c_id&lt;/code&gt; with the victim’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c_id&lt;/code&gt;, the victim’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Organization_name&lt;/code&gt; gets changed ;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/v2/resize:fit:562/format:webp/1*Pkd4zlVh7_ynWK7o1TOR8g.png&quot; alt=&quot;image&quot; class=&quot;iod&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We got the victim’s active cookies — but no-one will accept account takeover with active cookies, So I simply checked for &lt;em&gt;Session Fixation or No Logout&lt;/em&gt;&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; and I got lucky the application was vulnerable.&lt;/p&gt;

&lt;p&gt;Last two vulnerability, the application was taking current password in order to change password but after intercepting the request I found that they’re not sending or checking the current password and there wasn’t any authentication on change email operation.&lt;/p&gt;

&lt;h3 id=&quot;quick-wrap-up&quot;&gt;Quick wrap up&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Create an account --&amp;gt; change the &quot;c_id&quot; and add the blind xss payload in the &quot;organization_name&quot;
copy the victim&apos;s cookies 
Login as the victim by using the cookies
change the password by using:
           i. Change Password
           ii. Change Email --&amp;gt; Recover password
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I hope you’ve learned something new from this.&lt;br /&gt;
Thanks!&lt;/p&gt;

&lt;hr data-content=&quot;footnotes&quot; /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://heimdalsecurity.com/blog/privilege-escalation/&quot; target=&quot;_blank&quot;&gt;Horizontal Privilege Escalation&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://portswigger.net/web-security/cross-site-scripting/stored&quot; target=&quot;_blank&quot;&gt;Stored Cross Site Scripting&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://owasp.org/www-community/attacks/Session_fixation&quot; target=&quot;_blank&quot;&gt;Session Fixation or No Logout&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Saransh Saraf</name></author><category term="posts" /><summary type="html"></summary></entry></feed>